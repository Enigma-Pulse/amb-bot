from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from config import CHANNEL_ID, RULES_TEXT, WELCOME_IMAGE_PATH, REMINDER_IMAGE_PATH, logger
from database import db
from keyboards import (
    get_main_reply_keyboard, get_back_inline_keyboard, get_subscription_check_keyboard,
    get_rules_accept_keyboard, get_rules_final_accept_keyboard, get_main_inline_keyboard
)
from utils import (
    is_user_subscribed, format_profile_text, get_welcome_caption, get_main_screen_text,
    get_subscription_text, get_reminder_text, parse_start_parameter, ensure_directories,
    clear_subscription_cache, force_check_subscription
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ callback)
    if update.callback_query:
        message = update.callback_query.message
    else:
        message = update.message
    
    user = update.effective_user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
    if not await is_user_subscribed(context.bot, user.id):
        await message.reply_text(
            get_subscription_text(),
            reply_markup=get_subscription_check_keyboard(),
            parse_mode='HTML'
        )
        return

    # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä start –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    ref_by = None
    if update.message and update.message.text:
        ref_by = parse_start_parameter(update.message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    promo_code = db.get_or_create_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
        ref_by=ref_by
    )
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 23 –º–∏–Ω—É—Ç—ã
    context.job_queue.run_once(
        send_referral_reminder,
        when=23 * 60,
        chat_id=update.effective_chat.id
    )
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ 3 –¥–Ω—è –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä
    if ref_by is not None and ref_by != user.id:
        context.job_queue.run_once(
            credit_loyal_referral,
            when=3*24*60*60,
            chat_id=ref_by,
            data=user.id
        )
        await notify_simple_referral(context, ref_by)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    reply_keyboard = get_main_reply_keyboard(is_admin=user.id in [6798547914])  # TODO: –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥
    
    await message.reply_photo(
        photo=open(WELCOME_IMAGE_PATH, 'rb'),
        caption=get_welcome_caption(),
        parse_mode=ParseMode.HTML,
        reply_markup=reply_keyboard
    )
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü—Ä–æ—á–∏—Ç–∞–π –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞",
        reply_markup=get_rules_accept_keyboard()
    )

async def check_subscription_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ - –ú–ì–ù–û–í–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê"""
    query = update.callback_query
    user_id = query.from_user.id
    
    # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    if await force_check_subscription(context.bot, user_id):
        await query.message.delete()
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º onboarding
        await start(update, context)
    else:
        await query.answer("–¢—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    user_stats = db.get_user_stats(user.id)
    
    if not user_stats:
        await update.message.reply_text("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    profile_text = format_profile_text(user_stats, user.id, user.username)
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            profile_text, 
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.delete()
        await update.message.reply_text(
            profile_text,
            parse_mode=ParseMode.HTML,
            reply_markup=get_back_inline_keyboard()
        )

async def rules_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∞–≤–∏–ª"""
    await update.message.delete()
    await update.message.reply_text(
        RULES_TEXT,
        parse_mode=ParseMode.HTML,
        reply_markup=get_back_inline_keyboard()
    )

async def show_rules_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –ø—Ä–∞–≤–∏–ª –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è 'üí°–ü—Ä–æ—á–∏—Ç–∞–ª'"""
    query = update.callback_query
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "üí°–ü—Ä–æ—á–∏—Ç–∞–ª"
    try:
        await query.message.delete()
    except Exception:
        pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ —Å –∫–Ω–æ–ø–∫–æ–π "‚úÖ–ü—Ä–æ—á–∏—Ç–∞–ª"
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=RULES_TEXT,
        parse_mode=ParseMode.HTML,
        reply_markup=get_rules_final_accept_keyboard()
    )

async def support_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–¥–µ—Ä–∂–∫–∏"""
    await update.message.delete()
    await update.message.reply_text(
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @amb_managers",
        reply_markup=get_back_inline_keyboard()
    )

async def main_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ì–ª–∞–≤–Ω–∞—è'"""
    await update.message.delete()
    await send_main_reply_keyboard(update, context)

async def send_main_reply_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–π reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    prev = context.user_data.get('last_main_msg')
    if prev:
        try:
            await context.bot.delete_message(chat_id=prev['chat_id'], message_id=prev['message_id'])
        except:
            pass
    context.user_data['last_main_msg'] = None
    
    user_id = update.effective_user.id
    reply_keyboard = get_main_reply_keyboard(is_admin=user_id in [6798547914])  # TODO: –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
    if hasattr(update, "callback_query") and update.callback_query:
        target = update.callback_query.message
    else:
        target = update.message
    
    main_msg = await target.reply_text(
        get_main_screen_text(),
        parse_mode=ParseMode.HTML,
        reply_markup=reply_keyboard
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    context.user_data['last_main_msg'] = {
        'chat_id': main_msg.chat_id,
        'message_id': main_msg.message_id
    }

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def notify_simple_referral(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Ä–µ—Ñ–µ—Ä–∞–ª–µ"""
    await context.bot.send_message(
        chat_id=user_id,
        text="üîî<b>+1 —Ä–µ—Ñ–µ—Ä–∞–ª —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª—Å—è</b>\nüòè–°—Ç–∞–Ω–µ—Ç –ª–∏ –æ–Ω –ø—Ä–µ–¥–∞–Ω–Ω—ã–º‚ÅâÔ∏è",
        parse_mode=ParseMode.HTML
    )

async def credit_loyal_referral(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ª–æ—è–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞"""
    job = context.job
    referrer_id = job.chat_id
    referral_id = job.data
    
    logger.info(f"Checking loyalty for referrer {referrer_id}, referral {referral_id}")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ä–µ—Ñ–µ—Ä–∞–ª –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        db.cursor.execute("SELECT user_id FROM users WHERE user_id = ?", (referral_id,))
        if not db.cursor.fetchone():
            logger.warning(f"Referral {referral_id} not found in database")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        is_subscribed = await is_user_subscribed(context.bot, referral_id)
        logger.info(f"Referral {referral_id} subscription status: {is_subscribed}")
        
        if is_subscribed:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –ª–æ—è–ª—å–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
            db.cursor.execute(
                "UPDATE users SET loyal_referrals = loyal_referrals + 1 WHERE user_id = ?",
                (referrer_id,)
            )
            db.conn.commit()
            
            logger.info(f"Credited loyal referral for {referrer_id}")
            
            await context.bot.send_message(
                chat_id=referrer_id,
                text=(
                    "üéâ<b>–¢–í–û–ô –†–ï–§–ï–†–ê–õ –°–¢–ê–õ –ü–†–ï–î–ê–ù–ù–´–úüíñ</b>\n"
                    "<b>‚ûñ–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Ç–µ–±–µ –Ω–∞ –ø—Ä–æ–º–æ‚ÅâÔ∏è</b>"
                ),
                parse_mode=ParseMode.HTML
            )
        else:
            logger.info(f"Referral {referral_id} is not subscribed, no credit given")
            
    except Exception as e:
        logger.error(f"Error crediting loyal referral for {referrer_id}/{referral_id}: {e}")

async def send_referral_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ"""
    job = context.job
    user_id = job.chat_id
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    with open(REMINDER_IMAGE_PATH, "rb") as photo:
        await context.bot.send_photo(
            chat_id=user_id,
            photo=photo,
            caption=get_reminder_text(),
            parse_mode=ParseMode.HTML
        )

async def get_my_id(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    await update.message.reply_text(
        f"üë§ <b>–í–∞—à ID:</b> <code>{user.id}</code>\n"
        f"üìù <b>Username:</b> @{user.username or '–Ω–µ—Ç'}\n"
        f"üë®‚Äçüíº <b>–ò–º—è:</b> {user.first_name or '–Ω–µ—Ç'}",
        parse_mode=ParseMode.HTML
    )

async def refresh_subscription(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ - –ú–ì–ù–û–í–ï–ù–ù–ê–Ø"""
    user = update.effective_user
    
    # –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    is_subscribed = await force_check_subscription(context.bot, user.id)
    
    if is_subscribed:
        await update.message.reply_text(
            "‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞. –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.",
            parse_mode=ParseMode.HTML
        )
    else:
        await update.message.reply_text(
            "‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</b>\n\n"
            "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode=ParseMode.HTML
        )

async def check_loyalty_manual(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–∞–Ω–Ω–æ—Å—Ç–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    from config import ADMIN_IDS
    
    if update.effective_user.id not in ADMIN_IDS:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return
    
    await update.message.delete()
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π
    from datetime import datetime, timedelta
    three_days_ago = datetime.now() - timedelta(days=3)
    
    db.cursor.execute("""
        SELECT u.user_id, u.username, u.ref_by, u.joined_date
        FROM users u
        WHERE u.ref_by IS NOT NULL 
        AND u.joined_date < ?
        ORDER BY u.joined_date DESC
    """, (three_days_ago.isoformat(),))
    
    old_referrals = db.cursor.fetchall()
    
    if not old_referrals:
        await update.message.reply_text("üìä –ù–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return
    
    await update.message.reply_text(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(old_referrals)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É...")
    
    processed = 0
    credited = 0
    
    for user_id, username, ref_by, joined_date in old_referrals:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            if await is_user_subscribed(context.bot, user_id):
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ —É–∂–µ –Ω–∞—á–∏—Å–ª–µ–Ω –ø—Ä–µ–¥–∞–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª
                db.cursor.execute("""
                    SELECT loyal_referrals FROM users WHERE user_id = ?
                """, (ref_by,))
                current_loyal = db.cursor.fetchone()[0] or 0
                
                # –ù–∞—á–∏—Å–ª—è–µ–º –ø—Ä–µ–¥–∞–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª
                db.cursor.execute("""
                    UPDATE users SET loyal_referrals = loyal_referrals + 1 WHERE user_id = ?
                """, (ref_by,))
                db.conn.commit()
                
                credited += 1
                logger.info(f"Manually credited loyal referral: {ref_by} <- {user_id}")
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞
                await context.bot.send_message(
                    chat_id=ref_by,
                    text=(
                        "üéâ<b>–¢–í–û–ô –†–ï–§–ï–†–ê–õ –°–¢–ê–õ –ü–†–ï–î–ê–ù–ù–´–úüíñ</b>\n"
                        "<b>‚ûñ–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Ç–µ–±–µ –Ω–∞ –ø—Ä–æ–º–æ‚ÅâÔ∏è</b>"
                    ),
                    parse_mode=ParseMode.HTML
                )
            
            processed += 1
            
        except Exception as e:
            logger.error(f"Error processing referral {user_id}: {e}")
    
    await update.message.reply_text(
        f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {processed}\n"
        f"üíñ –ù–∞—á–∏—Å–ª–µ–Ω–æ –ø—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {credited}"
    )

async def general_back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—â–µ–π –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
    query = update.callback_query
    await query.answer()
    
    # –ü—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥"
    try:
        await query.message.delete()
    except Exception:
        pass

async def accept_rules_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è –ø—Ä–∞–≤–∏–ª"""
    query = update.callback_query
    user = query.from_user
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏
    try:
        await query.message.delete()
    except Exception:
        pass
    
    # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä start –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)
    ref_by = None
    if hasattr(update, 'message') and update.message and update.message.text:
        ref_by = parse_start_parameter(update.message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    promo_code = db.get_or_create_user(
        user_id=user.id,
        username=user.username,
        first_name=user.first_name,
        last_name=user.last_name,
        ref_by=ref_by
    )
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 23 –º–∏–Ω—É—Ç—ã
    context.job_queue.run_once(
        send_referral_reminder,
        when=23 * 60,
        chat_id=update.effective_chat.id
    )
    
    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ 3 –¥–Ω—è –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä
    if ref_by is not None and ref_by != user.id:
        context.job_queue.run_once(
            credit_loyal_referral,
            when=3*24*60*60,
            chat_id=ref_by,
            data=user.id
        )
        await notify_simple_referral(context, ref_by)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–º–æ–∫–æ–¥–µ
    promo_text = (
        "üõë–°—Ç–æ–π-—Å—Ç–æ–π-—Å—Ç–æ–π..\n"
        "üëâ–£ —Ç–µ–±—è –µ—Å—Ç—å <b>–ü–†–û–ú–û–ö–û–î</b>‚ÅâÔ∏è\n\n"
        "<b>–í–≤–µ–¥–∏ –µ–≥–æ –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥–∞—Ä–æ–∫!</b>\n\n"
        "‚¨áÔ∏è –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"‚úÖ–í–≤–µ—Å—Ç–∏ –ü–†–û–ú–û\" ‚¨áÔ∏è\n"
    )
    
    reply_keyboard = get_main_reply_keyboard(is_admin=user.id in [6798547914])  # TODO: –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ñ–∏–≥
    
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=promo_text,
        parse_mode=ParseMode.HTML,
        reply_markup=reply_keyboard
    ) 