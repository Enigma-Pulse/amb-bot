from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import ContextTypes
from config import ADMIN_IDS, logger
from database import db
from keyboards import (
    get_promo_choose_keyboard, get_promo_offers_keyboard, get_promo_confirm_keyboard,
    get_gift_keyboard, get_back_inline_keyboard
)
from utils import get_gift_text

async def promo_user_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ–º–æ-—Ñ–ª–æ—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    msg = update.message
    user_id = msg.from_user.id
    await msg.delete()
    
    await msg.reply_text(
        "–ó–∞ –¥—Ä—É–∑–µ–π ‚Äî –ø—Ä–æ–º–æ–∫–æ–¥—ã.\nüéÅ–ü—Ä–æ–≤–µ—Ä—å, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫",
        reply_markup=get_promo_choose_keyboard()
    )

async def promo_choose_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–º–æ"""
    query = update.callback_query
    await query.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    intro_msg = await query.message.reply_text(
        "üí≠<b>–û–ü –û–ü –û–ü</b>\n\n"
        "üí•<i>–¢—ã —É–∂–µ –ø—Ä–∏—à—ë–ª –∑–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏!</i>\n\n"
        "üéÅ<b>–í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å:</b>\n<i>–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ —Å–ø—Ä–∞–≤–∞ –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è</i>\n\n"
        "üíñ <b>1 –ø—Ä–µ–¥–∞–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª = 1üíñ</b>\n\n"
        "üíï <b>–ü—Ä–µ–¥–∞–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª</b> ‚Äî —Ç–æ—Ç, –∫—Ç–æ –æ—Å—Ç–∞–ª—Å—è –≤ –±–æ—Ç–µ 3 –¥–Ω—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ.",
        parse_mode=ParseMode.HTML
    )
    context.user_data['promo_intro_msg_id'] = intro_msg.message_id
    
    # –£–¥–∞–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    await query.message.delete()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤
    db.cursor.execute("SELECT offer_id, title, cost FROM promo_offers")
    rows = db.cursor.fetchall()
    
    if not rows:
        await query.message.reply_text(
            "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ, –∑–∞–π–¥–∏ –ø–æ–∑–∂–µ.", 
            reply_markup=get_back_inline_keyboard()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ñ—Ñ–µ—Ä–∞–º–∏
    keyboard = get_promo_offers_keyboard(rows)
    
    await query.message.reply_text(
        "üõí<b>–í–´–ë–ï–†–ò –¢–û–í–ê–†</b>", 
        reply_markup=keyboard, 
        parse_mode=ParseMode.HTML
    )

async def promo_back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥' –≤ –ø—Ä–æ–º–æ"""
    query = update.callback_query
    await query.answer()
    
    # –£–¥–∞–ª—è–µ–º –≤–≤–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    intro_id = context.user_data.pop('promo_intro_msg_id', None)
    if intro_id:
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=intro_id)
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º
    await query.message.delete()

async def promo_offer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–º–æ-–æ—Ñ—Ñ–µ—Ä–∞"""
    query = update.callback_query
    await query.answer()
    
    _, oid = query.data.split('|', 1)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä–∞
    db.cursor.execute("SELECT title, cost FROM promo_offers WHERE offer_id = ?", (oid,))
    row = db.cursor.fetchone()
    
    if not row:
        await query.message.reply_text(
            "–û—à–∏–±–∫–∞: –æ—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", 
            reply_markup=get_back_inline_keyboard()
        )
        return
    
    title, cost = row
    user_id = query.from_user.id
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã
    user_stats = db.get_user_stats(user_id)
    if not user_stats:
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    total_loyal = user_stats['loyal_referrals']
    used_loyal = user_stats['used_loyal']
    available = total_loyal - used_loyal
    
    if available < cost:
        # –£–¥–∞–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–º–æ –∏ –≤–≤–æ–¥–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await query.message.delete()
        intro_id = context.user_data.pop('promo_intro_msg_id', None)
        if intro_id:
            await context.bot.delete_message(
                chat_id=query.message.chat_id, 
                message_id=intro_id
            )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º—è–≥–∫–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=(
                "üôà<i>–£–ø—Å, –ø–æ—Ö–æ–∂–µ —Ç–µ–±–µ –ø–æ–∫–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</i>\n\n"
                f"‚ûñ<b>–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å {available}/{cost}</b>\n\n"
                "üó£Ô∏è<b>–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â—ë</b>"
            ),
            parse_mode=ParseMode.HTML,
            reply_markup=get_back_inline_keyboard()
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = get_promo_confirm_keyboard(oid)
    
    await query.message.delete()
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=f"–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å ¬´{title}¬ª –∑–∞ {cost} –ø—Ä–µ–¥–∞–Ω–Ω—ã—Ö?",
        reply_markup=keyboard
    )

async def promo_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–º–æ"""
    query = update.callback_query
    await query.answer()
    
    _, oid = query.data.split('|', 1)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ñ—Ñ–µ—Ä–∞
    db.cursor.execute("SELECT title, cost FROM promo_offers WHERE offer_id = ?", (oid,))
    row = db.cursor.fetchone()
    
    if not row:
        await query.message.reply_text(
            "–û—à–∏–±–∫–∞: –æ—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", 
            reply_markup=get_back_inline_keyboard()
        )
        return
    
    title, cost = row
    user_id = query.from_user.id
    
    # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ
    user_stats = db.get_user_stats(user_id)
    if not user_stats:
        await query.message.reply_text("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    
    total_loyal = user_stats['loyal_referrals']
    used_loyal = user_stats['used_loyal']
    available = max(0, total_loyal - used_loyal)  # –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    
    if available < cost:
        await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.", show_alert=True)
        return
    
    # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –ø—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    db.cursor.execute(
        "UPDATE users SET used_loyal = used_loyal + ? WHERE user_id = ?",
        (cost, user_id)
    )
    db.conn.commit()
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–º–æ
    from datetime import datetime
    now = datetime.now()
    db.cursor.execute(
        "INSERT INTO tasks (user_id, task_type, task_description, created_at) VALUES (?, 'promo', ?, ?)",
        (user_id, f"offer:{oid}", now)
    )
    task_id = db.cursor.lastrowid
    db.conn.commit()

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –ø—Ä–æ–º–æ
    for admin_id in ADMIN_IDS:
        from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f'approve_task|{task_id}')],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'decline_task|{task_id}')]
        ])
        
        await context.bot.send_message(
            chat_id=admin_id,
            text=(
                f"üì• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–º–æ</b>\n"
                f"–û—Ç @{update.effective_user.username or user_id}\n"
                f"–û—Ñ—Ñ–µ—Ä: {title} –∑–∞ {cost}üíñ\n"
                f"ID –∑–∞–¥–∞—á–∏: {task_id}"
            ),
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    
    await query.message.delete()
    await context.bot.send_message(
        chat_id=user_id,
        text="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ñ–¥–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ."
    )

async def prompt_promo_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    from config import ENTER_CODE
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–æ–¥
    await update.message.delete()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ message_id –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    prompt = await update.message.reply_text("üîë –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –¥–∞–ª –¥—Ä—É–≥:")
    context.user_data['promo_prompt_msg_id'] = prompt.message_id
    
    return ENTER_CODE

async def receive_promo_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    from config import ENTER_CODE
    from telegram.ext import ConversationHandler
    
    code = update.message.text.strip().upper()
    user_id = update.effective_user.id
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø—Ä–æ–º–æ–∫–æ–¥–∞
    prompt_id = context.user_data.pop('promo_prompt_msg_id', None)
    if prompt_id:
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=prompt_id)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∫–æ–¥–æ–º
    await update.message.delete()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥
    user_stats = db.get_user_stats(user_id)
    if not user_stats:
        await context.bot.send_message(
            chat_id=user_id,
            text="–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )
        return ConversationHandler.END
    
    my_code = user_stats['promo_code']
    if code == my_code:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –ù–µ–ª—å–∑—è –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–π –∂–µ –ø—Ä–æ–º–æ–∫–æ–¥."
        )
        return ConversationHandler.END

    # –ò—â–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–¥–∞
    owner_id = db.get_user_by_promo_code(code)
    if not owner_id:
        await context.bot.send_message(
            user_id, 
            "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )
        return ConversationHandler.END

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª –µ—â–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω
    db.cursor.execute("SELECT ref_by FROM users WHERE user_id = ?", (user_id,))
    ref_by = db.cursor.fetchone()[0]
    
    if ref_by is not None:
        await context.bot.send_message(
            user_id, 
            "‚ö†Ô∏è –í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ä–µ—Ñ–µ—Ä–µ—Ä—É."
        )
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
    db.cursor.execute("UPDATE users SET ref_by = ? WHERE user_id = ?", (owner_id, user_id))
    db.cursor.execute("UPDATE users SET referrals_count = referrals_count + 1 WHERE user_id = ?", (owner_id,))
    db.conn.commit()

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ 3 –¥–Ω—è
    from handlers.user_handlers import credit_loyal_referral
    context.job_queue.run_once(
        credit_loyal_referral,
        when=3*24*60*60,
        chat_id=owner_id,
        data=user_id
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é + –∫–Ω–æ–ø–∫—É ¬´–ó–∞–±—Ä–∞—Ç—å¬ª
    response_msg = await context.bot.send_message(
        chat_id=user_id,
        text=(
            "‚úÖNICE –í–∞—à –ø—Ä–æ–º–æ <b>–ê–ö–¢–ò–í–ò–†–û–í–ê–ù</b>\n\n"
            "üéÅ<b>–í–ê–ú –î–û–°–¢–£–ü–ï–ù –ü–û–î–ê–†–û–ö</b>"
        ),
        parse_mode=ParseMode.HTML,
        reply_markup=get_gift_keyboard()
    )
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–¥–∞
    await context.bot.send_message(
        chat_id=owner_id,
        text="‚úÖ<b>–£ —Ç–µ–±—è +1 –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª‚ÄºÔ∏è</b>\nüéâ–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–æ—Ñ–∏–ª—å",
        parse_mode=ParseMode.HTML
    )
    
    return ConversationHandler.END

async def get_gift(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞"""
    query = update.callback_query
    await query.answer()
    await query.message.delete()

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –±–µ—Ä–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫-–∫–æ–¥
    gift_code = "QODMSH"  # –º–æ–∂–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞—Ç—å –∏–∑ –ë–î

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–∞—Ä–∫–∞
    await context.bot.send_message(
        chat_id=query.from_user.id,
        text=get_gift_text(gift_code),
        parse_mode=ParseMode.HTML
    ) 