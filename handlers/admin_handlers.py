import os
import csv
from datetime import datetime, timedelta
from telegram import Update
from telegram.constants import ParseMode, ChatType
from telegram.ext import ContextTypes
from config import ADMIN_IDS, logger, SCREENSHOTS_DIR, MEMES_DIR
from database import db
from keyboards import (
    get_admin_reply_keyboard, get_content_reply_keyboard, get_promo_reply_keyboard,
    get_back_inline_keyboard, get_task_approval_keyboard, get_users_file_keyboard,
    get_broadcast_keyboard
)
from utils import (
    reset_broadcast_state, get_stats_text, get_date_range, make_chat_url, debug_subscription, clear_subscription_cache,
    BROADCAST_STAGE_TEXT, BROADCAST_STAGE_PHOTO, BROADCAST_STAGE_CONFIRM,
    CONTENT_STAGE_ADD_MEME, CONTENT_STAGE_DELETE_MEME, CONTENT_STAGE_ADD_TEXT,
    CONTENT_STAGE_LIST_TEXTS, CONTENT_STAGE_LIST_CHATS, CONTENT_STAGE_ADD_CHAT,
    CONTENT_STAGE_DELETE_CHAT, PROMO_STAGE_ADD, PROMO_STAGE_DELETE
)

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    if not is_admin(update.effective_user.id):
        return
    
    # –û—á–∏—â–∞–µ–º –ª—é–±—ã–µ –æ–∂–∏–¥–∞—é—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Ñ–ª–æ—É
    for key in ['promo_stage', 'content_stage', 'broadcast_stage', 'task_stage']:
        context.user_data.pop(key, None)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    try:
        await update.message.delete()
    except Exception:
        pass
    
    await update.message.reply_text(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_reply_keyboard()
    )

async def content_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º"""
    if not is_admin(update.effective_user.id):
        return
    
    await update.message.delete()
    await update.message.reply_text(
        "üß† –ö–æ–Ω—Ç–µ–Ω—Ç-–∑–∞–¥–∞–Ω–∏—è\n–í—ã–±–µ—Ä–∏, —Å —á–µ–º —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å:",
        reply_markup=get_content_reply_keyboard()
    )

async def content_add_meme_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–º–∞"""
    if not is_admin(update.effective_user.id):
        return
    
    await update.message.delete()
    context.user_data.pop('content_stage', None)
    await update.message.reply_text("üì• –ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–º (JPG/PNG):")
    context.user_data['content_stage'] = CONTENT_STAGE_ADD_MEME

async def content_delete_meme_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –º–µ–º–∞"""
    if not is_admin(update.effective_user.id):
        return
    
    await update.message.delete()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–º–æ–≤
    db.cursor.execute("SELECT id, file_path FROM meme_templates")
    memes = db.cursor.fetchall()
    
    if not memes:
        await update.message.reply_text("–ù–µ—Ç –º–µ–º–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_back_inline_keyboard())
        return
    
    msg_lines = ["üóë –°–ø–∏—Å–æ–∫ –º–µ–º–æ–≤ (ID ‚Äî —Ñ–∞–π–ª):"]
    for mid, file_path in memes:
        filename = os.path.basename(file_path)
        snippet = filename if len(filename) <= 30 else filename[:30] + "..."
        msg_lines.append(f"{mid} ‚Äî {snippet}")
    msg_lines.append("\n–ü—Ä–∏—à–ª–∏—Ç–µ ID –º–µ–º–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    
    await update.message.reply_text("\n".join(msg_lines))
    context.user_data['content_stage'] = CONTENT_STAGE_DELETE_MEME

async def content_list_chats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤"""
    if not is_admin(update.effective_user.id):
        return
    
    await update.message.delete()
    
    db.cursor.execute("SELECT chat_username FROM allowed_chats ORDER BY RANDOM()")
    chats = [row[0] for row in db.cursor.fetchall()]
    
    if not chats:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç.", reply_markup=get_back_inline_keyboard())
        return
    
    msg = "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:\n" + "\n".join(f"{i+1}. {chat}" for i, chat in enumerate(chats))
    await update.message.reply_text(msg, reply_markup=get_back_inline_keyboard())

async def content_add_chat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞"""
    if not is_admin(update.effective_user.id):
        return
    
    await update.message.delete()
    context.user_data['content_stage'] = CONTENT_STAGE_ADD_CHAT
    await update.message.reply_text("‚ûï –í–≤–µ–¥–∏—Ç–µ @username, t.me/... –∏–ª–∏ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç:")

async def content_delete_chat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞"""
    if not is_admin(update.effective_user.id):
        return
    
    await update.message.delete()
    
    # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    db.cursor.execute("SELECT chat_username FROM allowed_chats ORDER BY chat_username")
    chats = [row[0] for row in db.cursor.fetchall()]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ø–æ—Ä—è–¥–æ—á–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    context.user_data['delete_chats_list'] = chats
    
    if not chats:
        await update.message.reply_text("–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_back_inline_keyboard())
        return
    
    msg = "üóë –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:\n" + "\n".join(f"{i+1}. {chat}" for i, chat in enumerate(chats)) + "\n\n–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
    await update.message.reply_text(msg)
    context.user_data['content_stage'] = CONTENT_STAGE_DELETE_CHAT

async def content_add_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    if not is_admin(update.effective_user.id):
        return
    
    try:
        await update.message.delete()
    except Exception:
        pass
    
    context.user_data['content_stage'] = CONTENT_STAGE_ADD_TEXT
    await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")

async def content_list_texts_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤"""
    if not is_admin(update.effective_user.id):
        return
    
    await update.message.delete()
    
    db.cursor.execute("SELECT id, text FROM text_templates")
    rows = db.cursor.fetchall()
    
    if not rows:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –ø—É—Å—Ç.", reply_markup=get_back_inline_keyboard())
        return
    
    msg_lines = ["üßæ –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ (ID ‚Äî –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞):"]
    for tid, txt in rows:
        snippet = txt if len(txt) <= 30 else txt[:30] + "..."
        msg_lines.append(f"{tid} ‚Äî {snippet}")
    msg_lines.append("\n–ü—Ä–∏—à–ª–∏—Ç–µ ID —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    
    await update.message.reply_text("\n".join(msg_lines))
    context.user_data['content_stage'] = CONTENT_STAGE_LIST_TEXTS

async def promo_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ"""
    if not is_admin(update.effective_user.id):
        return
    
    await update.message.delete()
    await update.message.reply_text(
        "üíé Promo-–æ—Ñ–µ—Ä—ã\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_promo_reply_keyboard()
    )

async def promo_add_offer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ-–æ—Ñ—Ñ–µ—Ä–∞"""
    if not is_admin(update.effective_user.id):
        return
    
    await update.message.delete()
    context.user_data['promo_stage'] = PROMO_STAGE_ADD
    await update.message.reply_text("üì• –í–≤–µ–¥–∏—Ç–µ –æ—Ñ—Ñ–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")

async def promo_delete_offer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ-–æ—Ñ—Ñ–µ—Ä–∞"""
    if not is_admin(update.effective_user.id):
        return
    
    await update.message.delete()
    
    db.cursor.execute("SELECT offer_id, title, cost FROM promo_offers")
    rows = db.cursor.fetchall()
    
    if not rows:
        await update.message.reply_text("–ù–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=get_back_inline_keyboard())
        return
    
    msg_lines = ["üóë –°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ (ID ‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî –°—Ç–æ–∏–º–æ—Å—Ç—å):"]
    for oid, title, cost in rows:
        msg_lines.append(f"{oid} ‚Äî {title} ‚Äî {cost}")
    msg_lines.append("\n–ü—Ä–∏—à–ª–∏—Ç–µ ID –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    
    await update.message.reply_text("\n".join(msg_lines))
    context.user_data['promo_stage'] = PROMO_STAGE_DELETE

async def promo_list_offers_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ-–æ—Ñ—Ñ–µ—Ä–æ–≤"""
    if not is_admin(update.effective_user.id):
        return
    
    await update.message.delete()
    
    db.cursor.execute("SELECT offer_id, title, cost FROM promo_offers")
    rows = db.cursor.fetchall()
    
    if not rows:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ –ø—É—Å—Ç.", reply_markup=get_back_inline_keyboard())
        return
    
    lines = ["üìã –°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ (ID ‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî –°—Ç–æ–∏–º–æ—Å—Ç—å):"]
    for oid, title, cost in rows:
        lines.append(f"{oid} ‚Äî {title} ‚Äî {cost}")
    
    await update.message.reply_text("\n".join(lines), reply_markup=get_back_inline_keyboard())

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not is_admin(update.effective_user.id):
        return
    
    today_start, week_start = get_date_range()
    
    # –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    db.cursor.execute("SELECT COUNT(*) FROM users")
    total = db.cursor.fetchone()[0]
    
    # –ü—Ä–∏—à–ª–æ —Å–µ–≥–æ–¥–Ω—è
    db.cursor.execute(
        "SELECT COUNT(*) FROM users WHERE joined_date >= ?",
        (today_start.isoformat(),)
    )
    today_count = db.cursor.fetchone()[0]
    
    # –ü—Ä–∏—à–ª–æ –∑–∞ –Ω–µ–¥–µ–ª—é
    db.cursor.execute(
        "SELECT COUNT(*) FROM users WHERE joined_date >= ?",
        (week_start.isoformat(),)
    )
    week_count = db.cursor.fetchone()[0]
    
    text = get_stats_text(today_count, week_count, total)
    await update.message.reply_text(
        text, 
        parse_mode=ParseMode.HTML, 
        reply_markup=get_users_file_keyboard()
    )

async def check_db_status(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if not is_admin(update.effective_user.id):
        return
    
    await update.message.delete()
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ë–î
        import os
        db_size = os.path.getsize('bot_database.db')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        db.cursor.execute("SELECT COUNT(*) FROM users")
        user_count = db.cursor.fetchone()[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        db.cursor.execute("""
            SELECT user_id, username, joined_date 
            FROM users 
            ORDER BY joined_date DESC 
            LIMIT 3
        """)
        recent_users = db.cursor.fetchall()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ë–î
        db.cursor.execute("PRAGMA integrity_check")
        integrity_result = db.cursor.fetchone()
        
        status_text = (
            f"üìä <b>–°–û–°–¢–û–Ø–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•</b>\n\n"
            f"üìÅ –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {db_size:,} –±–∞–π—Ç\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}\n"
            f"üîç –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å: {'‚úÖ OK' if integrity_result[0] == 'ok' else '‚ùå –û–®–ò–ë–ö–ê'}\n\n"
            f"üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
        )
        
        for user_id, username, joined_date in recent_users:
            status_text += f"   {user_id} (@{username or '–Ω–µ—Ç'}) - {joined_date}\n"
        
        await update.message.reply_text(status_text, parse_mode=ParseMode.HTML)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")

async def send_users_file_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    query = update.callback_query
    user_id = query.from_user.id
    
    if not is_admin(user_id):
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    db.cursor.execute("SELECT user_id, username, first_name, last_name, ref_by, joined_date FROM users")
    rows = db.cursor.fetchall()
    
    # –ì–æ—Ç–æ–≤–∏–º CSV
    export_dir = "exports"
    os.makedirs(export_dir, exist_ok=True)
    filename = f"users_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    path = os.path.join(export_dir, filename)
    
    with open(path, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["user_id", "username", "first_name", "last_name", "ref_by", "joined_date"])
        writer.writerows(rows)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω—É
    with open(path, "rb") as f:
        await query.message.reply_document(document=f, filename=filename)

async def broadcast_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–∞–Ω–µ–ª—å —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(update.effective_user.id):
        return
    
    await update.message.delete()
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_broadcast_keyboard()
    )

async def handle_admin_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(update.effective_user.id):
        return
    
    mode = context.user_data.get('broadcast_mode')
    if not mode:
        return
    
    msg = update.message
    text = msg.text or msg.caption or ""
    photo = msg.photo[-1] if msg.photo else None
    sent, errors = 0, 0
    
    if mode == 'all':
        users = db.get_all_users()
        for uid in users:
            try:
                if photo:
                    file = await photo.get_file()
                    os.makedirs(SCREENSHOTS_DIR, exist_ok=True)
                    path = os.path.join(SCREENSHOTS_DIR, f"bc_{uid}.jpg")
                    await file.download_to_drive(path)
                    await context.bot.send_photo(
                        chat_id=uid, 
                        photo=open(path,'rb'), 
                        caption=text, 
                        parse_mode=ParseMode.HTML
                    )
                else:
                    await context.bot.send_message(
                        chat_id=uid, 
                        text=text, 
                        parse_mode=ParseMode.HTML
                    )
                sent += 1
            except:
                errors += 1
    
    elif mode == 'user':
        parts = text.split(' ', 1)
        if len(parts) < 2:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: `@username —Ç–µ–∫—Å—Ç`", 
                parse_mode=ParseMode.HTML
            )
            return
        
        uname, body = parts
        uid = db.get_user_by_username(uname.lstrip('@'))
        
        if not uid:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        try:
            if photo:
                file = await photo.get_file()
                os.makedirs(SCREENSHOTS_DIR, exist_ok=True)
                path = os.path.join(SCREENSHOTS_DIR, f"bc_{uid}.jpg")
                await file.download_to_drive(path)
                await context.bot.send_photo(
                    chat_id=uid, 
                    photo=open(path,'rb'), 
                    caption=body, 
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            else:
                await context.bot.send_message(
                    chat_id=uid, 
                    text=body, 
                    parse_mode=ParseMode.MARKDOWN_V2
                )
            sent = 1
        except:
            errors = 1
    
    context.user_data['broadcast_mode'] = None
    await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent} —É—Å–ø–µ—à–Ω–æ, {errors} –æ—à–∏–±–æ–∫.")

async def handle_admin_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    if not is_admin(update.effective_user.id):
        return
    
    # –£–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" - —Ç–µ–ø–µ—Ä—å –æ–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
    # if update.message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
    #     await stats_command(update, context)
    #     return
    
    # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω-—Ñ–ª–æ—É –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    content_stage = context.user_data.get('content_stage')
    stage = context.user_data.get('task_stage')
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ-–∫–æ–¥–∞ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
    if stage == 'await_promo_code' and update.message.text:
        prompt_id = context.user_data.pop('promo_prompt_msg_id', None)
        if prompt_id:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=prompt_id)
        
        await update.message.delete()
        code = update.message.text.strip()
        task_id = context.user_data['task_id']
        user_id = context.user_data['task_user_id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è
        db.approve_task(task_id, user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–ø–æ–Ω
        db.cursor.execute("INSERT INTO coupons (code, type) VALUES (?, ?)", (code, 'promo'))
        db.conn.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –∫—É–ø–æ–Ω: {code}"
        )
        
        await update.message.reply_text(
            "–ö—É–ø–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", 
            reply_markup=get_back_inline_keyboard()
        )
        context.user_data['task_stage'] = None
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–º–∞
    if content_stage == CONTENT_STAGE_ADD_MEME and update.message and update.message.photo:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        os.makedirs(MEMES_DIR, exist_ok=True)
        path = os.path.join(MEMES_DIR, f"meme_{file.file_id}.jpg")
        await file.download_to_drive(path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
        db.cursor.execute(
            "INSERT INTO meme_templates (file_path, text) VALUES (?, ?)",
            (path, "")
        )
        db.conn.commit()
        
        await update.message.reply_text("‚úÖ –ú–µ–º –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=get_back_inline_keyboard())
        context.user_data['content_stage'] = None
        return
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –º–µ–º–∞ –ø–æ ID
    if content_stage == CONTENT_STAGE_DELETE_MEME and update.message and update.message.text:
        text = update.message.text.strip()
        if text.isdigit():
            meme_id = int(text)
            if db.delete_meme(meme_id):
                await update.message.reply_text("‚úÖ –ú–µ–º —É–¥–∞–ª—ë–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∞–π–ª —É–¥–∞–ª—ë–Ω.", reply_markup=get_back_inline_keyboard())
            else:
                await update.message.reply_text("‚ùå –ú–µ–º —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=get_back_inline_keyboard())
            context.user_data['content_stage'] = None
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ–º–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", 
                reply_markup=get_back_inline_keyboard()
            )
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞
    if content_stage == CONTENT_STAGE_ADD_CHAT and update.message and update.message.text:
        chat = update.message.text.strip()
        if not (chat.startswith('@') or chat.startswith('t.me/') or chat.startswith('http')):
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ @username, t.me/... –∏–ª–∏ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç.",
                reply_markup=get_back_inline_keyboard()
            )
            return
        
        db.cursor.execute("INSERT OR IGNORE INTO allowed_chats (chat_username) VALUES (?)", (chat,))
        db.conn.commit()
        await update.message.reply_text(f"‚úÖ –ß–∞—Ç {chat} –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=get_back_inline_keyboard())
        context.user_data['content_stage'] = None
        return
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –ø–æ –Ω–æ–º–µ—Ä—É
    if content_stage == CONTENT_STAGE_DELETE_CHAT and update.message and update.message.text.isdigit():
        idx = int(update.message.text.strip()) - 1
        chats = context.user_data.get('delete_chats_list', [])
        
        if 0 <= idx < len(chats):
            removed = chats[idx]
            db.cursor.execute("DELETE FROM allowed_chats WHERE chat_username = ?", (removed,))
            db.conn.commit()
            await update.message.reply_text(f"‚úÖ –ß–∞—Ç {removed} —É–¥–∞–ª—ë–Ω.", reply_markup=get_back_inline_keyboard())
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü—Ä–∏—à–ª–∏—Ç–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞.", 
                reply_markup=get_back_inline_keyboard()
            )
        
        context.user_data.pop('delete_chats_list', None)
        context.user_data['content_stage'] = None
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ-–æ—Ñ—Ñ–µ—Ä–∞
    if context.user_data.get('promo_stage') == PROMO_STAGE_ADD and update.message and update.message.text:
        text = update.message.text.strip()
        if '‚Äî' in text:
            title, cost_str = [s.strip() for s in text.split('‚Äî', 1)]
            if cost_str.isdigit():
                cost = int(cost_str)
                db.cursor.execute("INSERT INTO promo_offers (title, cost) VALUES (?, ?)", (title, cost))
                db.conn.commit()
                await update.message.reply_text(
                    f"‚úÖ –û—Ñ—Ñ–µ—Ä '{title}' –∑–∞ {cost} –ø—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω.", 
                    reply_markup=get_back_inline_keyboard()
                )
                context.user_data['promo_stage'] = None
            else:
                await update.message.reply_text(
                    "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ ‚Äî.", 
                    reply_markup=get_back_inline_keyboard()
                )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî —Å—Ç–æ–∏–º–æ—Å—Ç—å", 
                reply_markup=get_back_inline_keyboard()
            )
        return
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ-–æ—Ñ—Ñ–µ—Ä–∞ –ø–æ ID
    if context.user_data.get('promo_stage') == PROMO_STAGE_DELETE and update.message and update.message.text.isdigit():
        oid = int(update.message.text.strip())
        db.cursor.execute("DELETE FROM promo_offers WHERE offer_id = ?", (oid,))
        db.conn.commit()
        await update.message.reply_text(f"‚úÖ –û—Ñ—Ñ–µ—Ä {oid} —É–¥–∞–ª—ë–Ω.", reply_markup=get_back_inline_keyboard())
        context.user_data['promo_stage'] = None
        return
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ ID
    if context.user_data.get('content_stage') == CONTENT_STAGE_LIST_TEXTS and update.message and update.message.text:
        text_id = update.message.text.strip()
        if text_id.isdigit():
            tid = int(text_id)
            db.cursor.execute("DELETE FROM text_templates WHERE id = ?", (tid,))
            db.conn.commit()
            await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç —É–¥–∞–ª—ë–Ω.", reply_markup=get_back_inline_keyboard())
            context.user_data['content_stage'] = None
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–∞.", 
                reply_markup=get_back_inline_keyboard()
            )
        return
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
    if content_stage == CONTENT_STAGE_ADD_TEXT and update.message:
        text = getattr(update.message, "text_html", None) or update.message.text or ""
        db.cursor.execute("INSERT INTO text_templates (text) VALUES (?)", (text,))
        db.conn.commit()
        await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=get_back_inline_keyboard())
        context.user_data['content_stage'] = None
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    stage_bc = context.user_data.get('broadcast_stage')
    if stage_bc == BROADCAST_STAGE_TEXT and update.message.text:
        text = update.message.text
        context.user_data['broadcast_text'] = text
        await update.message.delete()
        
        from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
        await update.message.reply_text(
            f"–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n{text}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ", callback_data='bc_attach_photo')],
                [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='bc_send_confirm')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='task_back')],
            ]),
            parse_mode=ParseMode.HTML
        )
    elif stage_bc == BROADCAST_STAGE_PHOTO and update.message.photo:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        os.makedirs("screenshots", exist_ok=True)
        path = "screenshots/broadcast_photo.jpg"
        await file.download_to_drive(path)
        context.user_data['broadcast_photo'] = path
        await update.message.delete()
        
        from keyboards import InlineKeyboardMarkup, InlineKeyboardButton
        await update.message.reply_text(
            "–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ì–æ—Ç–æ–≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–∞", callback_data='bc_execute')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='task_back')],
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def clear_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞"""
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    
    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —á–∏—Å—Ç–∏—Ç—å –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ, –≤ –ª–∏—á–∫–µ –º–æ–∂–Ω–æ –≤—Å–µ–≥–¥–∞
    if not is_admin(user_id) and update.effective_chat.type != ChatType.PRIVATE:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ
    async for msg in context.bot.get_chat_history(chat_id, limit=50):
        # –û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ —Ñ—Ä–∞–∑–µ)
        if "AMB Promo ‚Äî —Ç—ã –≤ –∏–≥—Ä–µ!" in (msg.text or ""):
            continue
        try:
            await context.bot.delete_message(chat_id, msg.message_id)
        except Exception:
            pass
    
    await context.bot.send_message(chat_id, "–ß–∞—Ç –æ—á–∏—â–µ–Ω. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å.")

async def debug_subscription_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not is_admin(update.effective_user.id):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if not context.args:
        await update.message.reply_text(
            "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /debug_sub <user_id>\n"
            "–ü—Ä–∏–º–µ—Ä: /debug_sub 123456789"
        )
        return
    
    try:
        user_id = int(context.args[0])
        debug_info = await debug_subscription(context.bot, user_id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = f"üîç <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        report += f"üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> {user_id}\n"
        report += f"üì¢ <b>–ö–∞–Ω–∞–ª:</b> {debug_info['channel_id']}\n\n"
        
        if debug_info['error']:
            report += f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {debug_info['error']}\n"
        else:
            if debug_info['bot_can_access_channel']:
                report += "‚úÖ <b>–ë–æ—Ç –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É</b>\n"
                if debug_info['channel_info']:
                    channel = debug_info['channel_info']
                    report += f"üì¢ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {channel['title']}\n"
                    report += f"üÜî <b>ID:</b> {channel['id']}\n"
                    report += f"üìù <b>–¢–∏–ø:</b> {channel['type']}\n"
                    if channel['username']:
                        report += f"üîó <b>Username:</b> @{channel['username']}\n"
                    report += "\n"
                
                if debug_info['user_status']:
                    status = debug_info['user_status']
                    report += f"üë§ <b>–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {status['status']}\n"
                    report += f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∞–Ω:</b> {'–î–∞' if status['is_member'] else '–ù–µ—Ç'}\n"
                    report += f"üëë <b>–°–æ–∑–¥–∞—Ç–µ–ª—å:</b> {'–î–∞' if status['is_creator_status'] else '–ù–µ—Ç'}\n"
                    report += f"‚ö° <b>–ê–¥–º–∏–Ω:</b> {'–î–∞' if status['is_admin_status'] else '–ù–µ—Ç'}\n"
                    if status['until_date']:
                        report += f"‚è∞ <b>–î–æ:</b> {status['until_date']}\n"
            else:
                report += "‚ùå <b>–ë–æ—Ç –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É</b>\n"
        
        await update.message.reply_text(report, parse_mode=ParseMode.HTML)
        
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
    except Exception as e:
        logger.error(f"Debug subscription command failed: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: {e}")

async def clear_cache_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    if not is_admin(update.effective_user.id):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    if not context.args:
        # –û—á–∏—â–∞–µ–º –≤–µ—Å—å –∫—ç—à
        clear_subscription_cache()
        await update.message.reply_text("‚úÖ –ö—ç—à –ø–æ–¥–ø–∏—Å–∫–∏ –æ—á–∏—â–µ–Ω –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    else:
        try:
            user_id = int(context.args[0])
            clear_subscription_cache(user_id)
            await update.message.reply_text(f"‚úÖ –ö—ç—à –ø–æ–¥–ø–∏—Å–∫–∏ –æ—á–∏—â–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ.")
        except Exception as e:
            logger.error(f"Clear cache command failed: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}") 