import logging
import sqlite3
import os
import csv
import string
import random
from datetime import datetime, timedelta
from urllib.parse import urlparse, parse_qs
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
    Document
)
from telegram.constants import ParseMode, ChatType
from telegram.error import BadRequest
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters,
    ConversationHandler,
    JobQueue
)

# Helper to notify a user of a new simple referral
async def notify_simple_referral(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    await context.bot.send_message(
        chat_id=user_id,
        text="üîî<b>+1 —Ä–µ—Ñ–µ—Ä–∞–ª —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª—Å—è</b>\nüòè–°—Ç–∞–Ω–µ—Ç –ª–∏ –æ–Ω –ø—Ä–µ–¥–∞–Ω–Ω—ã–º‚ÅâÔ∏è",
        parse_mode=ParseMode.HTML
    )

# Broadcast helpers
def reset_broadcast_state(context):
    for key in ['broadcast_stage', 'broadcast_mode', 'broadcast_text', 'broadcast_photo']:
        context.user_data.pop(key, None)

async def broadcast_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.delete()
    keyboard = [
        [
            InlineKeyboardButton("–í—Å–µ–º", callback_data='broadcast_all'),
            InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data='broadcast_user')
        ],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='task_back')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='bc_cancel')]
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def credit_loyal_referral(context: ContextTypes.DEFAULT_TYPE) -> None:
    job = context.job
    referrer_id = job.chat_id
    referral_id = job.data
    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=referral_id)
        if member.status in ('member', 'creator', 'administrator'):
            cursor.execute(
                "UPDATE users SET loyal_referrals = loyal_referrals + 1 WHERE user_id = ?",
                (referrer_id,)
            )
            conn.commit()
            await context.bot.send_message(
                chat_id=referrer_id,
                text=(
                    "üéâ<b>–¢–í–û–ô –†–ï–§–ï–†–ê–õ –°–¢–ê–õ –ü–†–ï–î–ê–ù–ù–´–úüíñ</b>\n"
                    "<b>‚ûñ–ü–æ—Å–º–æ—Ç—Ä–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Ç–µ–±–µ –Ω–∞ –ø—Ä–æ–º–æ‚ÅâÔ∏è</b>"
                ),
                parse_mode=ParseMode.HTML
            )
    except Exception as e:
        logger.error(f"Error crediting loyal referral for {referrer_id}/{referral_id}: {e}")

# ‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–µ—Ñ–µ—Ä–∞–ª–µ ‚Äî‚Äî‚Äî
async def send_referral_reminder(context: ContextTypes.DEFAULT_TYPE) -> None:
    job = context.job
    user_id = job.chat_id
    # —à–ª—ë–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç
    with open(REMINDER_IMAGE_PATH, "rb") as photo:
        await context.bot.send_photo(
            chat_id=user_id,
            photo=photo,
            caption=(
                "‚è± <b>–ñ–¥–∞—Ç—å 3 –¥–Ω—è? –ó–∞—á–µ–º?</b>\n"
                "–ü—Ä–æ–º–æ –º–æ–∂–Ω–æ –≤–∑—è—Ç—å <b>–ø—Ä—è–º–æ —Å–µ–π—á–∞—Å</b>:\n\n"
                '<a href="https://t.me/Kicksheringboss_bot?start=start">–ñ–º–∏ —Å—é–¥–∞</a>'
            ),
            parse_mode=ParseMode.HTML
        )

# ID of the private channel (bot must be admin)
CHANNEL_ID = -1002090905218

# Enable logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = "8284588833:AAGmxhM-yggPhmAupV6kfEKIJ2Q3OJYuhRU"
ADMIN_IDS = [6798547914]  # Admin user ID

# Global rules text
rules_text = (
    "<b>üõ¥–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>\n\n"
    "<b>–í—Å—ë –ø—Ä–æ—Å—Ç–æ:</b>\n\n"
    "<i>1Ô∏è‚É£ –ü—Ä–∏–≥–ª–∞—Å–∏–ª –¥—Ä—É–≥–∞ –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ</i>\n"
    "<i>2Ô∏è‚É£ –î—Ä—É–≥ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –∏ –æ—Å—Ç–∞–ª—Å—è –≤ –∫–∞–Ω–∞–ª–µ 3 –¥–Ω—è</i>\n"
    "<i>3Ô∏è‚É£ –ü–æ–ª—É—á–∏–ª –±–∞–ª–ª, –±–∞–ª–ª—ã = —Ä–µ–∞–ª—å–Ω—ã–µ –∫—É–ø–æ–Ω—ã</i>\n\n"
    "<b>üìå–ö—É–¥–∞ –∑–≤–∞—Ç—å –ª—é–¥–µ–π?</b>\n\n"
    "‚Äî <i>–ó–∞–∫–∏–¥—ã–≤–∞–π –≥–æ—Ç–æ–≤—ã–µ –º–µ–º—ã –∏ —Ç–µ–∫—Å—Ç—ã –≤ —á–∞—Ç—ã</i>\n"
    "‚Äî <i>–î–µ–ª–∏—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –ª–∏—á–Ω–æ –∏–ª–∏ –≤ —Å—Ç–æ—Ä–∏—Å</i>\n\n"
    "ü§î<b>–ù–µ —É–º–µ–µ—à—å –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å?</b>\n"
    "<b>–ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç –∏ –ø–æ–¥—Å–∫–∞–∂–µ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å.</b>\n\n"
    "<b>üöÄ–ë–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π ‚Äî –±–æ–ª—å—à–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤!</b>"
)

# Database setup
BASE_DIR = os.environ.get("BASE_DIR", os.path.dirname(__file__))
DB_PATH = os.environ.get("DB_PATH", os.path.join(BASE_DIR, "bot_database.db"))
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cursor = conn.cursor()
REMINDER_IMAGE_PATH = os.path.join(BASE_DIR, "reminder.png")
WELCOME_IMAGE_PATH = os.path.join(BASE_DIR, "welcome.jpg")

STATIC_DIR = os.environ.get("STATIC_DIR", BASE_DIR)
MEMES_DIR = os.path.join(BASE_DIR, "memes")
SCREENSHOTS_DIR = os.path.join(BASE_DIR, "screenshots")


cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    username TEXT,
    first_name TEXT,
    last_name TEXT,
    ref_by INTEGER
)
''')

# ‚Äî‚Äî‚Äî –ú–∏–≥—Ä–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ users ‚Äî‚Äî‚Äî
cursor.execute("PRAGMA table_info(users)")
cols = [row[1] for row in cursor.fetchall()]

# promo_code
if 'promo_code' not in cols:
    cursor.execute("ALTER TABLE users ADD COLUMN promo_code TEXT")

# referrals_count
if 'referrals_count' not in cols:
    cursor.execute("ALTER TABLE users ADD COLUMN referrals_count INTEGER DEFAULT 0")

conn.commit()

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –Ω–∞ promo_code
cursor.execute("""
    CREATE UNIQUE INDEX IF NOT EXISTS idx_users_promo_code
      ON users(promo_code)
""")
conn.commit()

# ### 2.1. –ë–µ—Ä—ë–º –≤—Å–µ—Ö, —É –∫–æ–≥–æ promo_code IS NULL
cursor.execute("SELECT user_id FROM users WHERE promo_code IS NULL")
rows = cursor.fetchall()
for (uid,) in rows:
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6 —Å–∏–º–≤–æ–ª–æ–≤ –∏–∑ A‚ÄìZ –∏ 0‚Äì9
    code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
    cursor.execute(
        "UPDATE users SET promo_code = ? WHERE user_id = ?",
        (code, uid)
    )
conn.commit()

# Ensure joined_date and used_loyal columns exist
for column, definition in [
    ("joined_date", "TIMESTAMP DEFAULT CURRENT_TIMESTAMP"),
    ("used_loyal", "INTEGER DEFAULT 0"),
]:
    try:
        cursor.execute(f"ALTER TABLE users ADD COLUMN {column} {definition}")
    except sqlite3.OperationalError:
        # Column already exists
        pass
conn.commit()

# Add column to permanently track earned loyal referrals
try:
    cursor.execute("ALTER TABLE users ADD COLUMN loyal_referrals INTEGER DEFAULT 0")
except sqlite3.OperationalError:
    pass
conn.commit()

cursor.execute('''
CREATE TABLE IF NOT EXISTS tasks (
    task_id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    task_description TEXT,
    status TEXT DEFAULT 'pending',
    task_type TEXT,
    screenshot_path TEXT,
    created_at TIMESTAMP,
    FOREIGN KEY(user_id) REFERENCES users(user_id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS coupons (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    code TEXT,
    type TEXT,
    used INTEGER DEFAULT 0
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS meme_templates (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    file_path TEXT,
    text TEXT
)
''')
cursor.execute('''
CREATE TABLE IF NOT EXISTS text_templates (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    text TEXT
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS allowed_chats (
    chat_username TEXT PRIMARY KEY
)
''')

# --- PROMO OFFERS TABLE ---
cursor.execute('''
CREATE TABLE IF NOT EXISTS promo_offers (
    offer_id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT NOT NULL,
    cost INTEGER NOT NULL
)
''')
conn.commit()

try:
    cursor.execute("ALTER TABLE users ADD COLUMN pending_tasks INTEGER DEFAULT 0")
except sqlite3.OperationalError:
    pass
try:
    cursor.execute("ALTER TABLE users ADD COLUMN completed_tasks INTEGER DEFAULT 0")
except sqlite3.OperationalError:
    pass
conn.commit()

inline_participate_markup = InlineKeyboardMarkup(
    [[InlineKeyboardButton("üöÄ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data='participate')]]
)

# Back button markup for use in profile, rules, support, etc.
back_inline_markup = InlineKeyboardMarkup(
    [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='task_back')]]
)

keyboard = [
    [InlineKeyboardButton("üöÄ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", callback_data='participate')],
    [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
    [InlineKeyboardButton("‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞", callback_data='rules')],
    [InlineKeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data='support')],
]

reply_markup = InlineKeyboardMarkup(keyboard)

# States for admin broadcast flow
BROADCAST_STAGE_TEXT = 'await_text'
BROADCAST_STAGE_PHOTO = 'await_photo'
BROADCAST_STAGE_CONFIRM = 'await_confirm'


# States for admin content flow
CONTENT_STAGE_ADD_MEME     = 'add_meme'
CONTENT_STAGE_MEME_CAPTION = 'meme_caption'
CONTENT_STAGE_DELETE_MEME  = 'delete_meme'
CONTENT_STAGE_ADD_TEXT     = 'add_text'
CONTENT_STAGE_LIST_TEXTS   = 'list_texts'
CONTENT_STAGE_LIST_CHATS   = 'list_chats'
CONTENT_STAGE_ADD_CHAT     = 'add_chat'
CONTENT_STAGE_DELETE_CHAT  = 'delete_chat'

# States for admin promo offers flow
PROMO_STAGE_ADD    = 'add_offer'
PROMO_STAGE_DELETE = 'delete_offer'

# ‚Äî‚Äî‚Äî –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ chat-URL ‚Äî‚Äî‚Äî
def make_chat_url(raw: str) -> str:
    raw = raw.strip()
    # –ï—Å–ª–∏ —É–∂–µ –ø–æ–ª–Ω—ã–π URL ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    if raw.startswith(('http://', 'https://')):
        return raw
    # –ï—Å–ª–∏ –±–µ–∑ —Å—Ö–µ–º—ã, –Ω–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å t.me/
    if raw.startswith('t.me/'):
        return 'https://' + raw
    # –ï—Å–ª–∏ —Å @username
    if raw.startswith('@'):
        return f'https://t.me/{raw[1:]}'
    # –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ username
    return f'https://t.me/{raw}'

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Determine the message object (supports command or callback)
    if update.callback_query:
        message = update.callback_query.message
    else:
        message = update.message
    user = update.effective_user
    # 1) Ensure user is subscribed to the required channel
    subscribed = False
    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user.id)
        if member.status in ('member', 'creator', 'administrator'):
            subscribed = True
    except Exception as e:
        logger.error(f"Subscription check failed or user not found: {e}")

    if not subscribed:
        await message.reply_text(
            "<b>‚úåÔ∏è–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
            "<i>üî∏–ü—Ä–µ–∂–¥–µ —á–µ–º –¥–≤–∏–Ω–µ–º—Å—è –¥–∞–ª—å—à–µ,\n"
            "–ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª.</i>\n\n"
            "<b>–¢–∞–º –≤—Å—è –¥–≤–∏–∂—É—Ö–∞, –∏–Ω—Å–∞–π–¥—ã –∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∏—à–∫–∏!</b>\n\n"
            "<b>‚òûhttps://t.me/+_C0oLC4YtHo2OGFi</b>",
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data='check_subscription')]]
            ),
            parse_mode='HTML'
        )
        return

    ref_by = None
    # Check for referrer in start parameters
    if update.message and update.message.text:
        text = update.message.text
        if text.startswith('/start'):
            parts = text.split(' ', 1)
            if len(parts) > 1:
                param = parts[1]
                if param.startswith('ref_'):
                    try:
                        ref_by = int(param[4:])
                    except ValueError:
                        ref_by = None
                else:
                    try:
                        ref_by = int(param)
                    except ValueError:
                        ref_by = None
    # Insert or update user with ref_by if not set
    cursor.execute("SELECT ref_by FROM users WHERE user_id = ?", (user.id,))
    existing = cursor.fetchone()
    if existing is None:
        cursor.execute("INSERT INTO users (user_id, username, first_name, last_name, ref_by) VALUES (?, ?, ?, ?, ?)",
                       (user.id, user.username, user.first_name, user.last_name, ref_by))
        conn.commit()
        # Schedule loyalty credit in 3 days if a referrer was set
        if ref_by is not None and ref_by != user.id:
            context.job_queue.run_once(
                credit_loyal_referral,
                when=3*24*60*60,
                chat_id=ref_by,
                data=user.id
            )
            await notify_simple_referral(context, ref_by)
    elif existing[0] is None and ref_by is not None and ref_by != user.id:
        cursor.execute("UPDATE users SET ref_by = ? WHERE user_id = ?", (ref_by, user.id))
        conn.commit()
        # Schedule loyalty credit in 3 days if a referrer was set
        if ref_by is not None and ref_by != user.id:
            context.job_queue.run_once(
                credit_loyal_referral,
                when=3*24*60*60,
                chat_id=ref_by,
                data=user.id
            )
            await notify_simple_referral(context, ref_by)
    
    # schedule reminder in 23 minutes
    context.job_queue.run_once(
        send_referral_reminder,
        when=23 * 60,
        chat_id=update.effective_chat.id
    )

    # –°—Ä–∞–∑—É –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–∫–∏/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT promo_code FROM users WHERE user_id = ?", (user.id,))
    if cursor.fetchone()[0] is None:
        new_code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))
        cursor.execute(
            "UPDATE users SET promo_code = ? WHERE user_id = ?",
            (new_code, user.id)
        )
    conn.commit()

    photo_caption = (
        'ü•∑ <b>AMB Promo ‚Äî —Ö–∞–ª—è–≤–∞ —Å—Ç–∞–ª–∞ —Ä–µ–∞–ª—å–Ω–æ–π!</b>\n\n'
        'üéÅ–ö—É–ø–æ–Ω—ã –Ω–∞ Whoosh, Urent, –Ø–Ω–¥–µ–∫—Å \n <b>–æ—Ç 100 –¥–æ 1000 ‚ÇΩ</b>\n –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π, –ø—Ä–æ—Å—Ç–æ –∑–∞ –¥—Ä—É–∑–µ–π!\n\n'
        'üëâ<i>–ü—Ä–∏–≤—ë–ª –¥—Ä—É–≥–∞ ‚Üí –æ–Ω –æ—Å—Ç–∞–ª—Å—è –≤ –∫–∞–Ω–∞–ª–µ \n<b>‚Üí üíñ–ó–ê–ë–†–ê–õ –ü–†–û–ú–û</b></i>\n\n'
        'üîÑ<i>–ë–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π ‚Äî –∫—Ä—É—á–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã!</i>\n\n'
        '<b>–ü–æ–ø—Ä–æ–±—É–π —Å–∞–º, —ç—Ç–æ –ø—Ä–æ—â–µ —á–µ–º –∫–∞–∂–µ—Ç—Å—è</b>‚ÄºÔ∏è\n\n'
        '‚∏ª\n\n'
        '<b>üë§–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @amb_managers\n'
        '<b>üí≠–û—Ç–∑—ã–≤—ã:</b> @otzv_amb\n'
        '<b>üéüÔ∏è–ö—É–ø–æ–Ω—ã –∏ —Ç–æ–≤–∞—Ä—ã:</b> @Kicksheringboss_bot'
    )
    user_id = user.id
    buttons = [
        [KeyboardButton("–ó–∞–¥–∞–Ω–∏—è")],
        [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
        [KeyboardButton("üî•–ü–æ–ª—É—á–∏—Ç—å –ü–†–û–ú–û"), KeyboardButton("‚úÖ–í–≤–µ—Å—Ç–∏ –ü–†–û–ú–û")]
    ]
    if user_id in ADMIN_IDS:
        buttons.append([KeyboardButton("–ê–¥–º–∏–Ω")])
    reply_keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    # Send welcome image with caption
    await message.reply_photo(
        photo=open(WELCOME_IMAGE_PATH, 'rb'),
        caption=photo_caption,
        parse_mode=ParseMode.HTML,
        reply_markup=reply_keyboard
    )
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü—Ä–æ—á–∏—Ç–∞–π –Ω–∞—à–∏ –ø—Ä–∞–≤–∏–ª–∞",
        reply_markup=InlineKeyboardMarkup(
            [[InlineKeyboardButton("üí° –ü—Ä–æ—á–∏—Ç–∞—Ç—å", callback_data='start_read_rules')]]
        )
    )
async def check_subscription_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    try:
        member = await context.bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        if member.status in ('member', 'creator', 'administrator'):
            await query.message.delete()
            # User is now subscribed; restart onboarding
            await start(update, context)
        else:
            await query.answer("–¢—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª.", show_alert=True)
        return
    except Exception as e:
        logger.error(f"Subscription re-check failed: {e}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", show_alert=True)
# --- ADMIN PANEL HANDLER ---
async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Clear any pending admin workflow stages
    context.user_data.pop('promo_stage', None)
    context.user_data.pop('content_stage', None)
    context.user_data.pop('broadcast_stage', None)
    context.user_data.pop('task_stage', None)
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    try:
        await update.message.delete()
    except Exception:
        pass
    # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∞
    buttons = [
        [KeyboardButton("–ö–æ–Ω—Ç–µ–Ω—Ç"), KeyboardButton("–ö—É–ø–æ–Ω—ã"), KeyboardButton("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
        [KeyboardButton("–†–∞—Å—Å—ã–ª–∫–∞"), KeyboardButton("–ü—Ä–æ–º–æ")],
        [KeyboardButton("–ì–ª–∞–≤–Ω–∞—è")]
    ]
    await update.message.reply_text(
        "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    )

async def clear_chat(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    # –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —á–∏—Å—Ç–∏—Ç—å –≤ –≥—Ä—É–ø–ø–µ –∏–ª–∏ –∫–∞–Ω–∞–ª–µ, –≤ –ª–∏—á–∫–µ –º–æ–∂–Ω–æ –≤—Å–µ–≥–¥–∞
    if user_id not in ADMIN_IDS and update.effective_chat.type != ChatType.PRIVATE:
        await update.message.reply_text("–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ (—Ç–æ–ª—å–∫–æ –±–æ—Ç –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å —Å–≤–æ–∏ –∏ —Å–≤–æ–∏ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è —é–∑–µ—Ä–æ–≤)
    async for msg in context.bot.get_chat_history(chat_id, limit=50):
        # –û—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø–æ —Ñ—Ä–∞–∑–µ)
        if "AMB Promo ‚Äî —Ç—ã –≤ –∏–≥—Ä–µ!" in (msg.text or ""):
            continue
        try:
            await context.bot.delete_message(chat_id, msg.message_id)
        except Exception:
            pass

    await context.bot.send_message(chat_id, "–ß–∞—Ç –æ—á–∏—â–µ–Ω. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Å—Ç–∞–ª–æ—Å—å.")

# –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
ENTER_CODE = 1

async def prompt_promo_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –£–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –∏ –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ –∫–æ–¥
    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π ¬´–í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥¬ª
    await update.message.delete()
    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ message_id, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å
    prompt = await update.message.reply_text("üîë –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –¥–∞–ª –¥—Ä—É–≥:")
    context.user_data['promo_prompt_msg_id'] = prompt.message_id
    return ENTER_CODE

async def receive_promo_code(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    code = update.message.text.strip().upper()
    user_id = update.effective_user.id
    prompt_id = context.user_data.pop('promo_prompt_msg_id', None)
    if prompt_id:
        await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=prompt_id)
    # –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–≤–µ–¥—ë–Ω–Ω—ã–º –∫–æ–¥–æ–º
    await update.message.delete()

    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–¥
    cursor.execute("SELECT promo_code FROM users WHERE user_id = ?", (user_id,))
    my_code = cursor.fetchone()[0]
    if code == my_code:
        await context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –ù–µ–ª—å–∑—è –≤–≤–æ–¥–∏—Ç—å —Å–≤–æ–π –∂–µ –ø—Ä–æ–º–æ–∫–æ–¥."
        )
        return ConversationHandler.END

    # 2) –ò—â–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–∞ –∫–æ–¥–∞
    cursor.execute("SELECT user_id FROM users WHERE promo_code = ?", (code,))
    row = cursor.fetchone()
    if not row:
        await context.bot.send_message(user_id, "‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return ConversationHandler.END
    owner_id = row[0]

    # 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ—Ñ–µ—Ä–∞–ª –µ—â—ë –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω
    cursor.execute("SELECT ref_by FROM users WHERE user_id = ?", (user_id,))
    if cursor.fetchone()[0] is not None:
        await context.bot.send_message(user_id, "‚ö†Ô∏è –í—ã —É–∂–µ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ —Ä–µ—Ñ–µ—Ä–µ—Ä—É.")
        return ConversationHandler.END

    # 4) –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
    cursor.execute("UPDATE users SET ref_by = ? WHERE user_id = ?", (owner_id, user_id))
    cursor.execute("UPDATE users SET referrals_count = referrals_count + 1 WHERE user_id = ?", (owner_id,))
    conn.commit()

    # Schedule loyalty credit in 3 days
    context.job_queue.run_once(
        credit_loyal_referral,
        when=3*24*60*60,
        chat_id=owner_id,
        data=user_id
    )
    # 5–∞) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–∞—Ü–∏—é + –∫–Ω–æ–ø–∫—É ¬´–ó–∞–±—Ä–∞—Ç—å¬ª
    response_msg = await context.bot.send_message(
        chat_id=user_id,
        text=(
            "‚úÖNICE –í–∞—à –ø—Ä–æ–º–æ <b>–ê–ö–¢–ò–í–ò–†–û–í–ê–ù</b>\n\n"
            "üéÅ<b>–í–ê–ú –î–û–°–¢–£–ü–ï–ù –ü–û–î–ê–†–û–ö</b>"
        ),
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üëâ–ó–ê–ë–†–ê–¢–¨üëà", callback_data='get_gift')
        ]])
    )
    # ‚Äî –≤–ª–∞–¥–µ–ª—å—Ü—É –∫–æ–¥–∞
    await context.bot.send_message(
        chat_id=owner_id,
        text="‚úÖ<b>–£ —Ç–µ–±—è +1 –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª‚ÄºÔ∏è</b>\nüéâ–ü—Ä–æ–≤–µ—Ä—å –ø—Ä–æ—Ñ–∏–ª—å",
        parse_mode=ParseMode.HTML
    )
    return ConversationHandler.END

# --- CONTENT COMMAND HANDLER ---
async def content_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return
    await update.message.delete()
    buttons = [
        [KeyboardButton("üì• –î–æ–±–∞–≤–∏—Ç—å –º–µ–º"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –º–µ–º")],
        [KeyboardButton("‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç"), KeyboardButton("üßæ –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤")],
        [KeyboardButton("üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤")],
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —á–∞—Ç")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text(
        "üß† –ö–æ–Ω—Ç–µ–Ω—Ç-–∑–∞–¥–∞–Ω–∏—è\n–í—ã–±–µ—Ä–∏, —Å —á–µ–º —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å:",
        reply_markup=reply_keyboard
    )


# Handler for reply-keyboard "üì• –î–æ–±–∞–≤–∏—Ç—å –º–µ–º"
async def content_add_meme_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
    await update.message.delete()
    context.user_data.pop('content_stage', None)
    await update.message.reply_text("üì• –ü—Ä–∏—à–ª–∏—Ç–µ –º–µ–º (JPG/PNG):")
    context.user_data['content_stage'] = CONTENT_STAGE_ADD_MEME

async def content_delete_meme_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return
    await update.message.delete()
    # List existing memes
    cursor.execute("SELECT id, text FROM meme_templates")
    memes = cursor.fetchall()
    if not memes:
        await update.message.reply_text("–ù–µ—Ç –º–µ–º–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=back_inline_markup)
        return
    msg_lines = ["üóë –°–ø–∏—Å–æ–∫ –º–µ–º–æ–≤ (ID ‚Äî –ø–æ–¥–ø–∏—Å—å):"]
    for mid, txt in memes:
        snippet = txt if len(txt) <= 30 else txt[:30] + "..."
        msg_lines.append(f"{mid} ‚Äî {snippet}")
    msg_lines.append("\n–ü—Ä–∏—à–ª–∏—Ç–µ ID –º–µ–º–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    await update.message.reply_text("\n".join(msg_lines))
    context.user_data['content_stage'] = CONTENT_STAGE_DELETE_MEME

# Handler for reply-keyboard "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤"
async def content_list_chats_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return
    await update.message.delete()
    cursor.execute("SELECT chat_username FROM allowed_chats ORDER BY RANDOM()")
    chats = [row[0] for row in cursor.fetchall()]
    if not chats:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—É—Å—Ç.", reply_markup=back_inline_markup)
        return
    msg = "üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:\n" + "\n".join(f"{i+1}. {chat}" for i, chat in enumerate(chats))
    await update.message.reply_text(msg, reply_markup=back_inline_markup)

# Handler for reply-keyboard "‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç"
async def content_add_chat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return
    await update.message.delete()
    context.user_data['content_stage'] = CONTENT_STAGE_ADD_CHAT
    await update.message.reply_text("‚ûï –í–≤–µ–¥–∏—Ç–µ @username, t.me/... –∏–ª–∏ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç:")

# Handler for reply-keyboard "üóë –£–¥–∞–ª–∏—Ç—å —á–∞—Ç"
async def content_delete_chat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return
    await update.message.delete()
    # Fetch chats in a consistent, sorted order
    cursor.execute("SELECT chat_username FROM allowed_chats ORDER BY chat_username")
    chats = [row[0] for row in cursor.fetchall()]
    # Store the ordered list for deletion reference
    context.user_data['delete_chats_list'] = chats
    if not chats:
        await update.message.reply_text("–ù–µ—Ç —á–∞—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=back_inline_markup)
        return
    msg = "üóë –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤:\n" + "\n".join(f"{i+1}. {chat}" for i, chat in enumerate(chats)) + "\n\n–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
    await update.message.reply_text(msg)
    context.user_data['content_stage'] = CONTENT_STAGE_DELETE_CHAT

# --- PROMO OFFERS COMMAND HANDLER ---
async def promo_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return
    await update.message.delete()
    buttons = [
        [KeyboardButton("üì• –î–æ–±–∞–≤–∏—Ç—å –æ—Ñ—Ñ–µ—Ä"), KeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –æ—Ñ—Ñ–µ—Ä")],
        [KeyboardButton("üìã –°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤")],
        [KeyboardButton("üîô –ù–∞–∑–∞–¥")]
    ]
    reply_keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await update.message.reply_text(
        "üíé Promo-–æ—Ñ–µ—Ä—ã\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_keyboard
    )

# Handler for reply-keyboard "üì• –î–æ–±–∞–≤–∏—Ç—å –æ—Ñ—Ñ–µ—Ä"
async def promo_add_offer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return
    await update.message.delete()
    context.user_data['promo_stage'] = PROMO_STAGE_ADD
    await update.message.reply_text("üì• –í–≤–µ–¥–∏—Ç–µ –æ—Ñ—Ñ–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ)")

# Handler for reply-keyboard "üóë –£–¥–∞–ª–∏—Ç—å –æ—Ñ—Ñ–µ—Ä"
async def promo_delete_offer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return
    await update.message.delete()
    cursor.execute("SELECT offer_id, title, cost FROM promo_offers")
    rows = cursor.fetchall()
    if not rows:
        await update.message.reply_text("–ù–µ—Ç –æ—Ñ—Ñ–µ—Ä–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=back_inline_markup)
        return
    msg_lines = ["üóë –°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ (ID ‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî –°—Ç–æ–∏–º–æ—Å—Ç—å):"]
    for oid, title, cost in rows:
        msg_lines.append(f"{oid} ‚Äî {title} ‚Äî {cost}")
    msg_lines.append("\n–ü—Ä–∏—à–ª–∏—Ç–µ ID –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    await update.message.reply_text("\n".join(msg_lines))
    context.user_data['promo_stage'] = PROMO_STAGE_DELETE

# Handler for reply-keyboard "üìã –°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤"
async def promo_list_offers_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return
    await update.message.delete()
    cursor.execute("SELECT offer_id, title, cost FROM promo_offers")
    rows = cursor.fetchall()
    if not rows:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ –ø—É—Å—Ç.", reply_markup=back_inline_markup)
        return
    lines = ["üìã –°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤ (ID ‚Äî –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî –°—Ç–æ–∏–º–æ—Å—Ç—å):"]
    for oid, title, cost in rows:
        lines.append(f"{oid} ‚Äî {title} ‚Äî {cost}")
    await update.message.reply_text("\n".join(lines), reply_markup=back_inline_markup)


# --- USER PROMO FLOW ---
async def promo_user_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Handle reply-button "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ"
    msg = update.message
    user_id = msg.from_user.id
    await msg.delete()
    await msg.reply_text(
        "–ó–∞ –¥—Ä—É–∑–µ–π ‚Äî –ø—Ä–æ–º–æ–∫–æ–¥—ã.\nüéÅ–ü—Ä–æ–≤–µ—Ä—å, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –Ω–∞ –ø–æ–¥–∞—Ä–æ–∫",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üòö–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data='promo_choose')]])
    )

async def promo_choose_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    # send and save intro text
    intro_msg = await query.message.reply_text(
        "üí≠<b>–û–ü –û–ü –û–ü</b>\n\n"
        "üí•<i>–¢—ã —É–∂–µ –ø—Ä–∏—à—ë–ª –∑–∞ –ø–æ–¥–∞—Ä–∫–∞–º–∏!</i>\n\n"
        "üéÅ<b>–í–æ—Ç —á—Ç–æ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å:</b>\n<i>–¶–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ —Å–ø—Ä–∞–≤–∞ –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è</i>\n\n"
        "üíñ <b>1 –ø—Ä–µ–¥–∞–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª = 1üíñ</b>\n\n"
        "üíï <b>–ü—Ä–µ–¥–∞–Ω–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª</b> ‚Äî —Ç–æ—Ç, –∫—Ç–æ –æ—Å—Ç–∞–ª—Å—è –≤ –±–æ—Ç–µ 3 –¥–Ω—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Ç–≤–æ–µ–π —Å—Å—ã–ª–∫–µ.",
        parse_mode=ParseMode.HTML
    )
    context.user_data['promo_intro_msg_id'] = intro_msg.message_id
    # delete original prompt
    await query.message.delete()
    cursor.execute("SELECT offer_id, title, cost FROM promo_offers")
    rows = cursor.fetchall()
    if not rows:
        await query.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–º–æ, –∑–∞–π–¥–∏ –ø–æ–∑–∂–µ.", reply_markup=back_inline_markup)
        return
    keyboard = [[InlineKeyboardButton(f"{title} –∑–∞ {cost}üíñ", callback_data=f'promo_offer|{oid}')] for oid, title, cost in rows]
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='promo_back')])
    await query.message.reply_text("üõí<b>–í–´–ë–ï–†–ò –¢–û–í–ê–†</b>", reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)

async def promo_back_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    # delete intro message if exists
    intro_id = context.user_data.pop('promo_intro_msg_id', None)
    if intro_id:
        await context.bot.delete_message(chat_id=query.message.chat_id, message_id=intro_id)
    # delete the current list message
    await query.message.delete()
    # return to main keyboard

async def promo_offer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    _, oid = query.data.split('|', 1)
    cursor.execute("SELECT title, cost FROM promo_offers WHERE offer_id = ?", (oid,))
    row = cursor.fetchone()
    if not row:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –æ—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_inline_markup)
        return
    title, cost = row
    user_id = query.from_user.id
    # Count only those referrals who stayed in the channel ‚â•3 days
    cursor.execute("SELECT loyal_referrals FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    total_loyal = row[0] if row else 0

    cursor.execute("SELECT used_loyal FROM users WHERE user_id = ?", (user_id,))
    used_loyal = cursor.fetchone()[0] or 0
    available = total_loyal - used_loyal
    if available < cost:
        # remove the promo list and intro messages
        await query.message.delete()
        intro_id = context.user_data.pop('promo_intro_msg_id', None)
        if intro_id:
            await context.bot.delete_message(
                chat_id=query.message.chat_id, message_id=intro_id
            )
        # Notify user with softer message and a back button
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=(
                "üôà<i>–£–ø—Å, –ø–æ—Ö–æ–∂–µ —Ç–µ–±–µ –ø–æ–∫–∞ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ø—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</i>\n\n"
                f"‚ûñ<b>–£ —Ç–µ–±—è —Å–µ–π—á–∞—Å {available}/{cost}</b>\n\n"
                "üó£Ô∏è<b>–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â—ë</b>"
            ),
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='promo_back')]]
            )
        )
        return
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–î–∞", callback_data=f'promo_confirm|{oid}')],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data='promo_back')]
    ])
    await query.message.delete()
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=f"–•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å ¬´{title}¬ª –∑–∞ {cost} –ø—Ä–µ–¥–∞–Ω–Ω—ã—Ö?",
        reply_markup=keyboard
    )

async def promo_confirm_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    _, oid = query.data.split('|', 1)
    cursor.execute("SELECT title, cost FROM promo_offers WHERE offer_id = ?", (oid,))
    row = cursor.fetchone()
    if not row:
        await query.message.reply_text("–û—à–∏–±–∫–∞: –æ—Ñ—Ñ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=back_inline_markup)
        return
    title, cost = row
    user_id = query.from_user.id
    # Recount available
    cursor.execute("SELECT loyal_referrals FROM users WHERE user_id = ?", (user_id,))
    row = cursor.fetchone()
    total_loyal = row[0] if row else 0
        
    cursor.execute("SELECT used_loyal FROM users WHERE user_id = ?", (user_id,))
    used_loyal = cursor.fetchone()[0] or 0
    available = total_loyal - used_loyal
    if available < cost:
        await query.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤.", show_alert=True)
        return
    # Deduct the cost from the user's loyal referrals
    cursor.execute(
        "UPDATE users SET used_loyal = used_loyal + ? WHERE user_id = ?",
        (cost, user_id)
    )
    conn.commit()
    # Create promo task
    now = datetime.now()
    cursor.execute(
        "INSERT INTO tasks (user_id, task_type, task_description, created_at) VALUES (?, 'promo', ?, ?)",
        (user_id, f"offer:{oid}", now)
    )
    task_id = cursor.lastrowid
    conn.commit()

    # Notify all admins of new promo request
    for admin_id in ADMIN_IDS:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f'approve_task|{task_id}')],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'decline_task|{task_id}')]
        ])
        await context.bot.send_message(
            chat_id=admin_id,
            text=(
                f"üì• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–º–æ</b>\n"
                f"–û—Ç @{update.effective_user.username or user_id}\n"
                f"–û—Ñ—Ñ–µ—Ä: {title} –∑–∞ {cost}üíñ\n"
                f"ID –∑–∞–¥–∞—á–∏: {task_id}"
            ),
            parse_mode=ParseMode.HTML,
            reply_markup=keyboard
        )
    await query.message.delete()
    await context.bot.send_message(
        chat_id=user_id,
        text="–ó–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –ñ–¥–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª–µ."
    )

# Handler for reply-keyboard "‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç"
async def content_add_text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return
    try:
        await update.message.delete()
    except Exception:
        pass
    context.user_data['content_stage'] = CONTENT_STAGE_ADD_TEXT
    await update.message.reply_text("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è:")

async def content_list_texts_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return
    await update.message.delete()
    cursor.execute("SELECT id, text FROM text_templates")
    rows = cursor.fetchall()
    if not rows:
        await update.message.reply_text("–°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ –ø—É—Å—Ç.", reply_markup=back_inline_markup)
        return
    msg_lines = ["üßæ –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤ (ID ‚Äî –Ω–∞—á–∞–ª–æ —Ç–µ–∫—Å—Ç–∞):"]
    for tid, txt in rows:
        snippet = txt if len(txt) <= 30 else txt[:30] + "..."
        msg_lines.append(f"{tid} ‚Äî {snippet}")
    msg_lines.append("\n–ü—Ä–∏—à–ª–∏—Ç–µ ID —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
    await update.message.reply_text("\n".join(msg_lines))
    context.user_data['content_stage'] = CONTENT_STAGE_LIST_TEXTS

# Handler for reply-keyboard "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è"
async def check_tasks_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return
    await update.message.delete()
    # Fetch next pending task with screenshot, including created_at
    cursor.execute(
        "SELECT task_id, user_id, screenshot_path, created_at FROM tasks "
        "WHERE status='pending' AND screenshot_path IS NOT NULL "
        "ORDER BY created_at ASC LIMIT 1"
    )
    row = cursor.fetchone()
    if not row:
        await context.bot.send_message(
            chat_id=user_id,
            text="–ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.",
            reply_markup=ReplyKeyboardMarkup([[KeyboardButton("–ì–ª–∞–≤–Ω–∞—è")]], resize_keyboard=True)
        )
        return
    task_id, task_user_id, screenshot_path, created_at = row
    # Get username
    cursor.execute("SELECT username FROM users WHERE user_id = ?", (task_user_id,))
    uname = cursor.fetchone()[0] or str(task_user_id)
    # Send screenshot
    if os.path.exists(screenshot_path):
        photo_message = await context.bot.send_photo(chat_id=user_id, photo=open(screenshot_path, 'rb'))
        # Store photo message id for later deletion
        context.user_data['last_task_photo_msg_id'] = photo_message.message_id
        context.user_data['last_task_photo_chat_id'] = user_id
    text = (
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{uname}\n"
        f"ID: {task_id}\n"
        f"–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: {created_at}"
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f'approve_task|{task_id}')],
        [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'decline_task|{task_id}')]
    ])
    await context.bot.send_message(
        chat_id=user_id,
        text=text,
        reply_markup=keyboard
    )

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.effective_user
    cursor.execute(
        "SELECT username, first_name, last_name, promo_code FROM users WHERE user_id = ?",
        (user.id,)
    )
    username, first_name, last_name, promo_code = cursor.fetchone()
    # Count referrals
    cursor.execute("SELECT COUNT(*) FROM users WHERE ref_by = ?", (user.id,))
    referrals_count = cursor.fetchone()[0]
    # Count completed tasks
    cursor.execute("SELECT COUNT(*) FROM tasks WHERE user_id = ? AND status = 'approved'", (user.id,))
    tasks_count = cursor.fetchone()[0]
    # Count tasks pending approval
    cursor.execute("SELECT COUNT(*) FROM tasks WHERE user_id = ? AND status = 'pending'", (user.id,))
    pending_count = cursor.fetchone()[0]
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª-–≤–æ –ø—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∏–∑ –ë–î
    cursor.execute("SELECT loyal_referrals FROM users WHERE user_id = ?", (user.id,))
    row = cursor.fetchone()
    total_loyal = row[0] if row else 0

    # –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ–ª—å–∫–æ —É–∂–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ
    cursor.execute("SELECT used_loyal FROM users WHERE user_id = ?", (user.id,))
    used_loyal = cursor.fetchone()[0] or 0

    # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω–æ
    available = total_loyal - used_loyal
    if available < 0:
        available = 0
    # Build formatted profile text (HTML mode)
    profile_text = (
        "<b>üíº–ü–†–û–§–ò–õ–¨:</b>\n\n"
        f"<b>üë§ User:</b> @{username or '–Ω–µ—Ç'}\n"
        f"<b>üÜî ID:</b> {user.id}\n\n"
        f"<b>üí∞ –¢–≤–æ–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã:</b> {referrals_count}\n"
        f"<b>üíï–ü–†–ï–î–ê–ù–ù–´–ï –†–ï–§–ï–†–ê–õ–´:</b> {available}\n"
        f"<b>üíî –ü–æ—Ç—Ä–∞—á–µ–Ω–æ üíñ:</b> {used_loyal}\n\n"
        f"<b>üî• –ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> {tasks_count}\n"
        f"<b>‚è≥ –ó–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ:</b> {pending_count}\n\n"
        f"<b>üîë –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:</b> <code>{promo_code}</code>\n\n"
        "<b>üîó –¢–≤–æ—è —Ä–µ—Ñ-—Å—Å—ã–ª–∫–∞:</b>\n"
        f"<a href=\"https://t.me/AMB_Promo_bot?start=ref_{user.id}\">https://t.me/AMB_Promo_bot?start=ref_{user.id}</a>"
    )
    # Send or edit with HTML parse mode
    if update.callback_query:
        await update.callback_query.edit_message_text(profile_text, parse_mode=ParseMode.HTML)
    else:
        # Remove user's message to clean up chat
        await update.message.delete()
        await update.message.reply_text(
            profile_text,
            parse_mode=ParseMode.HTML,
            reply_markup=back_inline_markup
        )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    # --- Broadcast Cancel Handler (must be before any 'broadcast_all' or 'broadcast_user' etc.) ---
    if query.data == 'bc_cancel':
        reset_broadcast_state(context)
        await query.message.delete()
        await query.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=back_inline_markup)
        return

    # Approve/Decline task callbacks
    if query.data.startswith('approve_task'):
        _, task_id = query.data.split('|', 1)
        # fetch task details
        cursor.execute("SELECT user_id, task_type FROM tasks WHERE task_id = ?", (task_id,))
        row = cursor.fetchone()
        user_id, task_type = row
        if task_type == 'promo':
            # prompt admin for coupon code
            context.user_data['task_stage'] = 'await_promo_code'
            context.user_data['task_id'] = task_id
            context.user_data['task_user_id'] = user_id
            await query.message.edit_text(
                "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∫—É–ø–æ–Ω–∞ –¥–ª—è –ø—Ä–æ–º–æ:",
                reply_markup=back_inline_markup
            )
            return
        # generic approval for other tasks
        cursor.execute("UPDATE tasks SET status='approved' WHERE task_id = ?", (task_id,))
        cursor.execute(
            "UPDATE users SET pending_tasks = pending_tasks - 1, completed_tasks = completed_tasks + 1 WHERE user_id = ?",
            (user_id,)
        )
        conn.commit()
        await context.bot.send_message(
            chat_id=user_id,
            text=(
                "üòà*–í–ê–ê–ô –ö–†–ê–°–ê–£–ß–ò–ö\n"
                "–ó–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–∏–ª —Å–∞–º –ê–î–ú–ò–ù!*\n\n"
                "üìà_–ï—â–µ *–ß–£–¢ –ß–£–¢* –∏ –∫–∞—Ç–∞—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ –±—É–¥–µ—à—å!!!_\n\n"
                "‚ô¶Ô∏è*–ü—Ä–æ–≤–µ—Ä—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ —Å–∫–æ–ª—å–∫–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –ø—Ä–∏—à–ª–æ*‚ô¶Ô∏è"
            ),
            parse_mode=ParseMode.MARKDOWN
        )
        # delete admin inline and any photo
        photo_msg_id = context.user_data.pop('last_task_photo_msg_id', None)
        photo_chat_id = context.user_data.pop('last_task_photo_chat_id', None)
        if photo_msg_id and photo_chat_id:
            await context.bot.delete_message(chat_id=photo_chat_id, message_id=photo_msg_id)
        await query.message.delete()
        return

    elif query.data.startswith('decline_task'):
        _, task_id = query.data.split('|', 1)
        # fetch the task's user
        cursor.execute("SELECT user_id FROM tasks WHERE task_id = ?", (task_id,))
        user_id = cursor.fetchone()[0]
        # update task status
        cursor.execute("UPDATE tasks SET status='declined' WHERE task_id = ?", (task_id,))
        # update user counters
        cursor.execute(
            "UPDATE users SET pending_tasks = pending_tasks - 1 WHERE user_id = ?",
            (user_id,)
        )
        conn.commit()
        # notify the user
        await context.bot.send_message(
            chat_id=user_id,
            text=(
                "*üòï–ê–ô –ë–†–ê–¢ –û–ë–ò–ñ–ê–ï–®–¨*\n\n"
                "‚ûñ_–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –æ–¥–æ–±—Ä–∏–ª –∞–¥–º–∏–Ω\n–í–æ–∑–º–æ–∂–Ω–æ, —Ç—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª —É—Å–ª–æ–≤–∏—è –∏–ª–∏ –Ω–µ –ø—Ä–∏–ª–æ–∂–∏–ª —Å–∫—Ä–∏–Ω—à–æ—Ç._\n\n"
                "‚òëÔ∏è*–ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!*"
            ),
            parse_mode=ParseMode.MARKDOWN
        )
        # delete admin's inline message and any photo
        photo_msg_id = context.user_data.pop('last_task_photo_msg_id', None)
        photo_chat_id = context.user_data.pop('last_task_photo_chat_id', None)
        if photo_msg_id and photo_chat_id:
            await context.bot.delete_message(chat_id=photo_chat_id, message_id=photo_msg_id)
        await query.message.delete()
        return

    if query.data == 'start_read_rules':
        await query.message.delete()
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=rules_text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton("‚úÖ –ü—Ä–æ—á–∏—Ç–∞–ª", callback_data='start_accept_rules')]]
            )
        )
        return
    if query.data == 'start_accept_rules':
        await query.message.delete()
        # show main reply keyboard instead of inline participate
        await send_main_reply_keyboard(update, context)
        return

    if query.data == 'participate':
        await query.message.delete()
        await show_participate_menu(update, context)
    elif query.data == 'task_meme':
        await handle_task_meme(update, context)
    elif query.data == 'task_text':
        await handle_task_text(update, context)
    elif query.data == 'task_repost':
        await handle_task_repost(update, context)
    elif query.data == 'task_back':
        reset_broadcast_state(context)
        await handle_task_back(update, context)
    elif query.data == 'task_other_text':
        await handle_task_other_text(update, context)
    elif query.data == 'task_other_meme':
        await handle_task_other_meme(update, context)
        return
    elif query.data == 'task_done':
        await handle_task_done(update, context)
    elif query.data == 'profile':
        await query.message.delete()
        cursor.execute("SELECT username, first_name, last_name FROM users WHERE user_id = ?", (user_id,))
        user_row = cursor.fetchone()
        if user_row:
            username, first_name, last_name = user_row
            cursor.execute("SELECT COUNT(*) FROM users WHERE ref_by = ?", (user_id,))
            referrals = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM tasks WHERE user_id = ?", (user_id,))
            tasks_count = cursor.fetchone()[0]
            profile_text = (
                f"üë§ –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å AMB PromoDealer\n\n"
                f"üìé Telegram: @{username if username else '–Ω–µ—Ç'}\n"
                f"üÜî ID: {user_id}\n"
                f"üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals}\n"
                f"üß© –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {tasks_count}\n\n"
                f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
                f"t.me/AMBpromo_bot?start=ref_{user_id}"
            )
        else:
            profile_text = "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=profile_text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='task_back')]])
        )
    elif query.data == 'rules':
        await query.message.delete()
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=rules_text,
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='task_back')]])
        )
    elif query.data == 'support':
        support_text = "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @amb_support"
        await query.message.delete()
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=support_text,
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='task_back')]])
        )
    elif query.data == 'admin_broadcast':
        await query.message.delete()
        keyboard = [
            [
                InlineKeyboardButton("–í—Å–µ–º", callback_data='broadcast_all'),
                InlineKeyboardButton("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data='broadcast_user')
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='task_back')],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data='bc_cancel')]
        ]
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    elif query.data == 'broadcast_all':
        await query.message.delete()
        context.user_data['broadcast_stage'] = BROADCAST_STAGE_TEXT
        context.user_data['broadcast_text'] = None
        context.user_data['broadcast_photo'] = None
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ *–≤—Å–µ–º* –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='task_back')]])
        )
    elif query.data == 'broadcast_user':
        await query.message.delete()
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–ü—Ä–∏—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `@username —Ç–µ–∫—Å—Ç` –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è Markdown, —ç–º–æ–¥–∑–∏ –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ.",
            parse_mode='Markdown'
        )
        context.user_data['broadcast_mode'] = 'user'

    elif query.data == 'bc_attach_photo':
        await query.message.delete()
        context.user_data['broadcast_stage'] = BROADCAST_STAGE_PHOTO
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='task_back')]])
        )
    elif query.data == 'bc_send_confirm':
        await query.message.delete()
        context.user_data['broadcast_stage'] = BROADCAST_STAGE_CONFIRM
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É *–≤—Å–µ–º*?",
            parse_mode=ParseMode.MARKDOWN_V2,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–∞", callback_data='bc_execute')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='task_back')]
            ])
        )
    elif query.data == 'bc_execute':
        await query.message.delete()
        text = context.user_data.get('broadcast_text', '')
        photo_path = context.user_data.get('broadcast_photo')
        sent, errors = 0, 0
        cursor.execute("SELECT user_id FROM users")
        for (uid,) in cursor.fetchall():
            try:
                if photo_path and os.path.exists(photo_path):
                    await context.bot.send_photo(chat_id=uid, photo=open(photo_path, 'rb'), caption=text, parse_mode=ParseMode.HTML)
                else:
                    await context.bot.send_message(chat_id=uid, text=text, parse_mode=ParseMode.HTML)
                sent += 1
            except:
                errors += 1
        context.user_data['broadcast_stage'] = None
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent} —É—Å–ø–µ—à–Ω–æ, {errors} –æ—à–∏–±–æ–∫."
        )
    elif query.data == 'get_gift':
        # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await query.answer()
        await query.message.delete()

        # 1) –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –±–µ—Ä—ë–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–∞—Ä–æ–∫-–∫–æ–¥
        gift_code = "QODMSH"  # –º–æ–∂–Ω–æ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞—Ç—å –∏–∑ –ë–î

        # 2) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ–¥–∞—Ä–∫–∞
        await context.bot.send_message(
            chat_id=query.from_user.id,
            text=(
                "üéÅ<b>–¢–í–û–ô –ü–û–î–ê–†–û–ö</b>\n\n"
                "üëâ<i>–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–∞ —Å–µ—Ä–≤–∏—Å –Æ–†–ï–ù–¢</i>üëà\n\n"
                f"üé´<b>–ü–†–û–ú–û:</b> <code>{gift_code}</code>\n"
                "(‚¨ÜÔ∏è–Ω–∞–∂–º–∏ –Ω–∞ –∫–æ–¥ —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å‚¨ÜÔ∏è)\n\n"
                "<i>–î–∞–µ—Ç</i> <b>–°–ö–ò–î–ö–£ –í 50%</b> <i>–Ω–∞ –ø–µ—Ä–≤—ã–µ 2 –ø–æ–µ–∑–¥–∫–∏</i>"
            ),
            parse_mode=ParseMode.HTML
        )

# --- PARTICIPATE TASKS MENU AND HANDLERS ---
async def show_participate_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Handle both callback_query and direct message triggers
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        target = query.message
        keyboard = [
            [InlineKeyboardButton("üß† –ú–µ–º", callback_data='task_meme')],
            [InlineKeyboardButton("üó£ –¢–µ–∫—Å—Ç", callback_data='task_text')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='task_back')],
        ]
        await target.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        # Remove user's "–ó–∞–¥–∞–Ω–∏—è" message
        await update.message.delete()
        # (Removed deletion of previous main-screen message to keep reply keyboard visible)
        # target = update.message  # we can reuse for reply (though message is deleted)
        keyboard = [
            [InlineKeyboardButton("üß† –ú–µ–º", callback_data='task_meme')],
            [InlineKeyboardButton("üó£ –¢–µ–∫—Å—Ç", callback_data='task_text')],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='task_back')],
        ]
        # Reply to the chat, not to the deleted message object
        chat_id = update.effective_chat.id
        await context.bot.send_message(
            chat_id=chat_id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

async def handle_task_meme(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    try:
        await query.message.delete()
    except BadRequest:
        pass

    # 1) –ë–µ—Ä—ë–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω –º–µ–º–∞ (id, –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É). –¢–µ–∫—Å—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
    cursor.execute(
        "SELECT id, file_path FROM meme_templates ORDER BY RANDOM() LIMIT 1"
    )
    row = cursor.fetchone()
    if not row:
        await query.message.reply_text("–®–∞–±–ª–æ–Ω–æ–≤ –º–µ–º–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    tpl_id, file_path = row

    # –§–æ—Ä–º–∏—Ä—É–µ–º ‚Äú–ø–ª–∞—à–∫—É‚Äù —Å –ª–∏—á–Ω—ã–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–º
    cursor.execute("SELECT promo_code FROM users WHERE user_id = ?", (query.from_user.id,))
    promo_code = cursor.fetchone()[0]
    panel = (
        "üîé –ò—â–∏ –≤ –ø–æ–∏—Å–∫–µ @AMB_Promo_bot –∏\n"
        f"‚ÄºÔ∏è –í–≤–æ–¥–∏ —ç—Ç–æ—Ç <b>–ü–†–û–ú–û:</b> <code>{promo_code}</code>\n"
        "üéÅ –ò –ø–æ–ª—É—á–∏ —Å–≤–æ–π <b>–ü–û–î–ê–†–û–ö</b>"
    )

    # 2) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
    now = datetime.now()
    cursor.execute(
        "INSERT INTO tasks (user_id, task_type, task_description, created_at) "
        "VALUES (?, 'meme', ?, ?)",
        (query.from_user.id, panel, now)
    )
    conn.commit()

    # 3) –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π
    cursor.execute(
        "UPDATE users SET pending_tasks = pending_tasks + 1 WHERE user_id = ?",
        (query.from_user.id,)
    )
    conn.commit()

    # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∞–º –º–µ–º
    if os.path.exists(file_path):
        photo_msg = await query.message.reply_photo(
            photo=open(file_path, 'rb'),
            caption=panel,
            parse_mode=ParseMode.HTML
        )
        context.user_data['last_meme_msg_id'] = photo_msg.message_id
    else:
        await query.message.reply_text("–§–∞–π–ª –º–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # 5) –ë–µ—Ä—ë–º –≤—Å–µ —á–∞—Ç—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö
    cursor.execute("SELECT chat_username FROM allowed_chats")
    all_chats = [r[0] for r in cursor.fetchall()]
    # —Å–ª—É—á–∞–π–Ω–∞—è –≤—ã–±–æ—Ä–∫–∞ –¥–æ 5
    chats = random.sample(all_chats, k=min(5, len(all_chats)))

    # 6) –°—Ç—Ä–æ–∏–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ (–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL)
    buttons = [
        [InlineKeyboardButton(text=chat, url=make_chat_url(chat))]
        for chat in chats
    ]
    # 7) –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–µ–º
    buttons.append([
        InlineKeyboardButton("‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª", callback_data='task_done'),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='task_back'),
        InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π", callback_data='task_other_meme')
    ])

    # 8) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    list_msg = await context.bot.send_message(
        chat_id=query.message.chat.id,
        text="–°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –∫—É–¥–∞ –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ—Ç –º–µ–º:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    context.user_data['last_task_msg_id'] = list_msg.message_id

async def handle_task_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    # —É–¥–∞–ª—è–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
    try:
        await query.message.delete()
    except BadRequest:
        pass

    # 1) –ë–µ—Ä—ë–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω —Ç–µ–∫—Å—Ç–∞ –∏–∑ text_templates
    cursor.execute("SELECT id, text FROM text_templates ORDER BY RANDOM() LIMIT 1")
    row = cursor.fetchone()
    if not row:
        await query.message.reply_text("–®–∞–±–ª–æ–Ω–æ–≤ —Ç–µ–∫—Å—Ç–∞ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    tpl_id, txt = row

    # 2) –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∑–∞–¥–∞—á—É –≤ –ë–î
    now = datetime.now()
    cursor.execute(
        "INSERT INTO tasks (user_id, task_type, task_description, created_at) "
        "VALUES (?, ?, ?, ?)",
        (query.from_user.id, 'text', txt, now)
    )
    conn.commit()

    # 3) –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute(
        "UPDATE users SET pending_tasks = pending_tasks + 1 WHERE user_id = ?",
        (query.from_user.id,)
    )
    conn.commit()

    # 4) –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cursor.execute("SELECT promo_code FROM users WHERE user_id = ?", (query.from_user.id,))
    promo_code = cursor.fetchone()[0]

    # 5) –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
    combined = (
        f"{txt}\n\n"  # —à–∞–±–ª–æ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        "üîé –ò—â–∏ –≤ –ø–æ–∏—Å–∫–µ @AMB_Promo_bot –∏\n"
        f"‚ÄºÔ∏è –í–≤–æ–¥–∏ —ç—Ç–æ—Ç <b>–ü–†–û–ú–û:</b> <code>{promo_code}</code>\n"
        "üéÅ –ò –ø–æ–ª—É—á–∏ —Å–≤–æ–π <b>–ü–û–î–ê–†–û–ö</b>"
    )
    content_msg = await query.message.reply_text(
        combined,
        parse_mode=ParseMode.HTML
    )
    context.user_data['last_task_content_msg_id'] = content_msg.message_id

    # 6) –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ –Ω–µ –±–æ–ª–µ–µ 5
    cursor.execute("SELECT chat_username FROM allowed_chats")
    all_chats = [r[0] for r in cursor.fetchall()]
    chats = random.sample(all_chats, k=min(5, len(all_chats)))

    # 7) –°—Ç—Ä–æ–∏–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ (–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º URL)
    buttons = [
        [InlineKeyboardButton(text=chat, url=make_chat_url(chat))]
        for chat in chats
    ]
    # + –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–µ–º
    buttons.append([
        InlineKeyboardButton("‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª", callback_data='task_done'),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='task_back'),
        InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π", callback_data='task_other_text')
    ])

    # 8) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    list_msg = await context.bot.send_message(
        chat_id=query.message.chat.id,
        text="–û—Ç–ø—Ä–∞–≤—å ‚¨ÜÔ∏è‚¨ÜÔ∏è‚¨ÜÔ∏è —Ç–µ–∫—Å—Ç –≤ –ª—é–±–æ–π –∏–∑ —á–∞—Ç–æ–≤ –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    context.user_data['last_task_msg_id'] = list_msg.message_id
    
async def handle_task_other_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–¥–∞–Ω–∏–µ–º
    chat_id = query.message.chat.id
    for key in ('last_task_content_msg_id', 'last_task_msg_id'):
        msg_id = context.user_data.pop(key, None)
        if msg_id:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            except:
                pass
    # –®–ª—ë–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    await handle_task_text(update, context)
    
async def handle_task_other_meme(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id

    # 1) –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–º–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    for key in ('last_meme_msg_id', 'last_task_msg_id'):
        msg_id = context.user_data.pop(key, None)
        if msg_id:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            except:
                pass

    # 2) –ë–µ—Ä—ë–º —Å–ª—É—á–∞–π–Ω—ã–π —à–∞–±–ª–æ–Ω –º–µ–º–∞ (id –∏ –ø—É—Ç—å)
    cursor.execute(
        "SELECT id, file_path FROM meme_templates ORDER BY RANDOM() LIMIT 1"
    )
    row = cursor.fetchone()
    if not row:
        await query.message.reply_text("–®–∞–±–ª–æ–Ω–æ–≤ –º–µ–º–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return
    tpl_id, file_path = row

    # 3) –§–æ—Ä–º–∏—Ä—É–µ–º ‚Äú–ø–ª–∞—à–∫—É‚Äù —Å –ª–∏—á–Ω—ã–º –ø—Ä–æ–º–æ–∫–æ–¥–æ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–∞—Å–∫
    cursor.execute("SELECT promo_code FROM users WHERE user_id = ?", (query.from_user.id,))
    promo_code = cursor.fetchone()[0]
    panel = (
        "üîé –ò—â–∏ –≤ –ø–æ–∏—Å–∫–µ @AMB_Promo_bot –∏\n"
        f"‚ÄºÔ∏è –í–≤–æ–¥–∏ —ç—Ç–æ—Ç <b>–ü–†–û–ú–û:</b> <code>{promo_code}</code>\n"
        "üéÅ –ò –ø–æ–ª—É—á–∏ —Å–≤–æ–π <b>–ü–û–î–ê–†–û–ö</b>"
    )
    now = datetime.now()
    cursor.execute(
        "INSERT INTO tasks (user_id, task_type, task_description, created_at) "
        "VALUES (?, 'meme', ?, ?)",
        (query.from_user.id, panel, now)
    )
    cursor.execute(
        "UPDATE users SET pending_tasks = pending_tasks + 1 WHERE user_id = ?",
        (query.from_user.id,)
    )
    conn.commit()

    # 4) –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–º —Å –Ω–∞—à–µ–π –ø–∞–Ω–µ–ª—å—é
    if os.path.exists(file_path):
        photo_msg = await query.message.reply_photo(
            photo=open(file_path, 'rb'),
            caption=panel,
            parse_mode=ParseMode.HTML
        )
        context.user_data['last_meme_msg_id'] = photo_msg.message_id
    else:
        await query.message.reply_text("–§–∞–π–ª –º–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # 5) –ë–µ—Ä—ë–º –≤—Å–µ —á–∞—Ç—ã –∏ –≤—ã–±–∏—Ä–∞–µ–º –Ω–µ –±–æ–ª–µ–µ 5 —Å–ª—É—á–∞–π–Ω—ã—Ö
    cursor.execute("SELECT chat_username FROM allowed_chats")
    all_chats = [r[0] for r in cursor.fetchall()]
    chats = random.sample(all_chats, k=min(5, len(all_chats)))

    # 6) –°—Ç—Ä–æ–∏–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
    buttons = [
        [InlineKeyboardButton(text=chat, url=make_chat_url(chat))]
        for chat in chats
    ]
        # + –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–µ–º —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω—ã
    buttons.append([
        InlineKeyboardButton("‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª", callback_data='task_done'),
        InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='task_back'),
        InlineKeyboardButton("üîÑ –î—Ä—É–≥–æ–π", callback_data='task_other_meme')
    ])
    list_msg = await context.bot.send_message(
        chat_id=chat_id,
        text="–ù–∏–∂–µ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤, –∫—É–¥–∞ –º–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å ‚¨ÜÔ∏è —ç—Ç–æ—Ç ‚¨ÜÔ∏è –º–µ–º:",
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    context.user_data['last_task_msg_id'] = list_msg.message_id
    
async def handle_task_repost(update, context):
    query = update.callback_query
    # Delete the "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è" prompt entirely
    await query.message.delete()
    txt = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ —Ä–µ–ø–æ—Å—Ç –Ω–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞ @ambsharing –≤ –æ–¥–Ω–æ–º –∏–∑ —á–∞—Ç–æ–≤ –Ω–∏–∂–µ:"
    now = datetime.now()
    cursor.execute(
        "INSERT INTO tasks (user_id, task_type, task_description, created_at) VALUES (?, ?, ?, ?)",
        (query.from_user.id, 'repost', txt, now)
    )
    conn.commit()
    # bump pending task count for user
    cursor.execute("UPDATE users SET pending_tasks = pending_tasks + 1 WHERE user_id = ?", (query.from_user.id,))
    conn.commit()
    cursor.execute("SELECT chat_username FROM allowed_chats ORDER BY RANDOM()")
    chats = [row[0] for row in cursor.fetchall()]
    text = txt + "\n\n" + "\n".join(chats)
    keyboard = [[InlineKeyboardButton("‚úÖ –Ø –≤—ã–ø–æ–ª–Ω–∏–ª", callback_data='task_done')]]
    await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_task_back(update, context):
    query = update.callback_query
    # 1) –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∏ —É–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–Ω–æ–ø–∫–∏
    await query.answer()
    chat_id = query.message.chat.id
    await query.message.delete()

    # 2) –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –ª–∏–±–æ –º–µ–º, –ª–∏–±–æ —Ç–µ–∫—Å—Ç
    for key in ('last_task_msg_id', 'last_meme_msg_id', 'last_task_content_msg_id'):
        msg_id = context.user_data.pop(key, None)
        if msg_id:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            except:
                pass

async def handle_task_done(update, context):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat.id

    # 1) –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç
    context.user_data['awaiting_screenshot'] = True
    prompt = await context.bot.send_message(
        chat_id=chat_id,
        text="üì∏ <b>–ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è</b>",
        parse_mode=ParseMode.HTML
    )
    context.user_data['screenshot_prompt_id'] = prompt.message_id

    # 2) –ò —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–º–æ–º/—Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    for key in ('last_task_msg_id', 'last_meme_msg_id', 'last_task_content_msg_id'):
        msg_id = context.user_data.pop(key, None)
        if msg_id:
            try:
                await context.bot.delete_message(chat_id=chat_id, message_id=msg_id)
            except:
                pass


# --- MAIN SCREEN HANDLER ---
async def main_screen(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await send_main_reply_keyboard(update, context)

async def handle_screenshot(update, context):
    # Only process screenshots if user was prompted
    if not context.user_data.get('awaiting_screenshot'):
        return
    # Clear the flag so only the first photo is processed
    context.user_data['awaiting_screenshot'] = False
    # delete the screenshot prompt and the user‚Äôs photo message
    prompt_id = context.user_data.pop('screenshot_prompt_id', None)
    if prompt_id:
        await context.bot.delete_message(
            chat_id=update.effective_chat.id,
            message_id=prompt_id
        )
    await update.message.delete()
    user = update.effective_user
    # –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª–∏–±–æ —Ñ–æ—Ç–æ, –ª–∏–±–æ —Ñ–∞–π–ª-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    photo_file = None
    if update.message.photo:
        photo_file = await update.message.photo[-1].get_file()
    elif update.message.document and update.message.document.mime_type.startswith('image/'):
        photo_file = await update.message.document.get_file()
    else:
        return
    # find latest pending task
    cursor.execute(
        "SELECT task_id FROM tasks WHERE user_id = ? AND status = 'pending' ORDER BY created_at DESC LIMIT 1",
        (user.id,)
    )
    row = cursor.fetchone()
    if not row:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.")
        return
    task_id = row[0]
    # save photo
    os.makedirs(SCREENSHOTS_DIR, exist_ok=True)
    path = os.path.join(SCREENSHOTS_DIR, f"{task_id}.jpg")
    await photo_file.download_to_drive(path)
    cursor.execute(
        "UPDATE tasks SET screenshot_path = ?, status = 'awaiting_review' WHERE task_id = ?",
        (path, task_id)
    )
    conn.commit()
    # confirm receipt to user
    await update.message.reply_text(
        "*üî•GOOD! –°–ª–µ–¥–∏ –∑–∞ –∫–æ–ª-–≤–æ –ø—Ä–∏—à–µ–¥—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –≤ –ø—Ä–æ—Ñ–∏–ª–µ!*\n\n"
        "_ü§®–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –Ω–∞ –∫—É–ø–æ–Ω?!_\n"
        "*üó£Ô∏è–í—ã–ø–æ–ª–Ω–∏ –µ—â–µ –∑–∞–¥–∞–Ω–∏–π –∏–ª–∏ –ø—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞!*",
        parse_mode=ParseMode.MARKDOWN
    )
    # Notify admins of new submission
    for admin_id in ADMIN_IDS:
        try:
            with open(path, 'rb') as photo:
                caption = (
                    f"üì• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç @{user.username or user.id}</b>\n"
                    f"ID –∑–∞–¥–∞–Ω–∏—è: {task_id}"
                )
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f'approve_task|{task_id}')],
                    [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'decline_task|{task_id}')]
                ])
                photo_msg = await context.bot.send_photo(
                    chat_id=admin_id,
                    photo=photo,
                    caption=caption,
                    parse_mode=ParseMode.HTML,
                    reply_markup=keyboard
                )
                context.user_data['last_task_photo_msg_id'] = photo_msg.message_id
                context.user_data['last_task_photo_chat_id'] = admin_id
        except Exception:
            pass
    # show main reply keyboard
    # await send_main_reply_keyboard(update, context)


# --- ADMIN BROADCAST MESSAGE HANDLER ---
async def handle_admin_broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    mode = context.user_data.get('broadcast_mode')
    if not mode:
        return
    msg = update.message
    text = msg.text or msg.caption or ""
    photo = msg.photo[-1] if msg.photo else None
    sent, errors = 0, 0

    if mode == 'all':
        cursor.execute("SELECT user_id FROM users")
        for (uid,) in cursor.fetchall():
            try:
                if photo:
                    file = await photo.get_file()
                    os.makedirs(SCREENSHOTS_DIR, exist_ok=True)
                    path = os.path.join(SCREENSHOTS_DIR, f"bc_{uid}.jpg")
                    await file.download_to_drive(path)
                    await context.bot.send_photo(chat_id=uid, photo=open(path,'rb'), caption=text, parse_mode=ParseMode.HTML)
                else:
                    await context.bot.send_message(chat_id=uid, text=text, parse_mode=ParseMode.HTML)
                sent += 1
            except:
                errors += 1

    elif mode == 'user':
        parts = text.split(' ', 1)
        if len(parts) < 2:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ: `@username —Ç–µ–∫—Å—Ç`", parse_mode=ParseMode.HTML)
            return
        uname, body = parts
        cursor.execute("SELECT user_id FROM users WHERE username = ?", (uname.lstrip('@'),))
        row = cursor.fetchone()
        if not row:
            await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        uid = row[0]
        try:
            if photo:
                file = await photo.get_file()
                os.makedirs(SCREENSHOTS_DIR, exist_ok=True)
                path = os.path.join(SCREENSHOTS_DIR, f"bc_{uid}.jpg")
                await file.download_to_drive(path)
                await context.bot.send_photo(chat_id=uid, photo=open(path,'rb'), caption=body, parse_mode=ParseMode.HTML)
            else:
                await context.bot.send_message(chat_id=uid, text=body, parse_mode=ParseMode.MARKDOWN_V2)
            sent = 1
        except:
            errors = 1

    context.user_data['broadcast_mode'] = None
    await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent} —É—Å–ø–µ—à–Ω–æ, {errors} –æ—à–∏–±–æ–∫.")


# --- ADMIN BROADCAST FLOW INPUT HANDLER ---
async def handle_admin_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if update.effective_user.id not in ADMIN_IDS:
        return
    
    if update.message.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await stats_command(update, context)
        return

    # –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω-—Ñ–ª–æ—É –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    content_stage = context.user_data.get('content_stage')
    stage = context.user_data.get('task_stage')

    # Approve: await promo code
    if stage == 'await_promo_code' and update.message.text:
        # delete the bot's prompt message
        prompt_id = context.user_data.pop('promo_prompt_msg_id', None)
        if prompt_id:
            await context.bot.delete_message(chat_id=update.effective_chat.id, message_id=prompt_id)
        # delete the admin's response message
        await update.message.delete()
        code = update.message.text.strip()
        task_id = context.user_data['task_id']
        user_id = context.user_data['task_user_id']
        # update task status
        cursor.execute("UPDATE tasks SET status='approved' WHERE task_id = ?", (task_id,))
        # update user counters
        cursor.execute(
            "UPDATE users SET pending_tasks = pending_tasks - 1, completed_tasks = completed_tasks + 1 WHERE user_id = ?",
            (user_id,)
        )
        conn.commit()
        # save coupon
        cursor.execute("INSERT INTO coupons (code, type) VALUES (?, ?)", (code, 'promo'))
        conn.commit()
        # notify user
        await context.bot.send_message(chat_id=user_id,
                                       text=f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –∫—É–ø–æ–Ω: {code}")
        # now send updated profile to user
        cursor.execute("SELECT username, first_name, last_name FROM users WHERE user_id = ?", (user_id,))
        uname, first_name, last_name = cursor.fetchone()
        cursor.execute("SELECT COUNT(*) FROM tasks WHERE user_id = ? AND status = 'approved'", (user_id,))
        completed = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM tasks WHERE user_id = ? AND status = 'pending'", (user_id,))
        pending = cursor.fetchone()[0]
        profile_text = (
            "*üíº–ü–†–û–§–ò–õ–¨:*\n\n"
            f"*üë§ User:* _@{uname}_\n"
            f"*ü™™ ID:* _{user_id}_\n\n"
            f"*üî• –ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:* {completed}\n"
            f"*‚è≥ –ó–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ:* {pending}"
        )
        await context.bot.send_message(chat_id=user_id,
                                       text=profile_text,
                                       parse_mode=ParseMode.MARKDOWN,
                                       reply_markup=back_inline_markup)
        await update.message.reply_text("–ö—É–ø–æ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", reply_markup=back_inline_markup)
        context.user_data['task_stage'] = None
        return

    # Decline: await reason
    if stage == 'await_decline_reason' and update.message.text:
        reason = update.message.text.strip()
        task_id = context.user_data['task_id']
        user_id = context.user_data['task_user_id']
        cursor.execute("UPDATE tasks SET status='declined' WHERE task_id = ?", (task_id,))
        # decrement pending tasks on decline
        cursor.execute(
            "UPDATE users SET pending_tasks = pending_tasks - 1 WHERE user_id = ?",
            (user_id,)
        )
        conn.commit()
        await context.bot.send_message(chat_id=user_id,
                                       text=f"‚ùå –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
        # now send updated profile to user
        cursor.execute("SELECT username, first_name, last_name FROM users WHERE user_id = ?", (user_id,))
        uname, first_name, last_name = cursor.fetchone()
        cursor.execute("SELECT COUNT(*) FROM tasks WHERE user_id = ? AND status = 'approved'", (user_id,))
        completed = cursor.fetchone()[0]
        cursor.execute("SELECT COUNT(*) FROM tasks WHERE user_id = ? AND status = 'pending'", (user_id,))
        pending = cursor.fetchone()[0]
        profile_text = (
            "*üíº–ü–†–û–§–ò–õ–¨:*\n\n"
            f"*üë§ User:* _@{uname}_\n"
            f"*ü™™ ID:* _{user_id}_\n\n"
            f"*üî• –ó–∞–¥–∞–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:* {completed}\n"
            f"*‚è≥ –ó–∞–¥–∞–Ω–∏–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ:* {pending}"
        )
        await context.bot.send_message(chat_id=user_id,
                                       text=profile_text,
                                       parse_mode=ParseMode.MARKDOWN,
                                       reply_markup=back_inline_markup)
        await update.message.reply_text("–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.", reply_markup=back_inline_markup)
        context.user_data['task_stage'] = None
        return

    # -- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–º–∞: —Å—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª, –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ --
    if content_stage == CONTENT_STAGE_ADD_MEME and update.message and update.message.photo:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        os.makedirs(MEMES_DIR, exist_ok=True)
        path = os.path.join(MEMES_DIR, f"meme_{file.file_id}.jpg")
        await file.download_to_drive(path)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
        cursor.execute(
            "INSERT INTO meme_templates (file_path, text) VALUES (?, ?)",
            (path, "")
        )
        conn.commit()
        await update.message.reply_text("‚úÖ –ú–µ–º –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=back_inline_markup)
        context.user_data['content_stage'] = None
        return

    # Handle deletion of meme by ID
    if content_stage == CONTENT_STAGE_DELETE_MEME and update.message and update.message.text:
        text = update.message.text.strip()
        if text.isdigit():
            meme_id = int(text)
            cursor.execute("DELETE FROM meme_templates WHERE id = ?", (meme_id,))
            conn.commit()
            await update.message.reply_text("‚úÖ –ú–µ–º —É–¥–∞–ª—ë–Ω.", reply_markup=back_inline_markup)
            context.user_data['content_stage'] = None
        else:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ–º–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.", reply_markup=back_inline_markup)
        return
    # Handle adding a new chat with validation
    if content_stage == CONTENT_STAGE_ADD_CHAT and update.message and update.message.text:
        chat = update.message.text.strip()
        # Validate format: must start with '@', 't.me/' or 'http'
        if not (chat.startswith('@') or chat.startswith('t.me/') or chat.startswith('http')):
            await update.message.reply_text(
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ @username, t.me/... –∏–ª–∏ –ø–æ–ª–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç.",
                reply_markup=back_inline_markup
            )
            return
        # Save to database
        cursor.execute("INSERT OR IGNORE INTO allowed_chats (chat_username) VALUES (?)", (chat,))
        conn.commit()
        await update.message.reply_text(f"‚úÖ –ß–∞—Ç {chat} –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=back_inline_markup)
        context.user_data['content_stage'] = None
        return

    # Handle deletion of chat by number
    if content_stage == CONTENT_STAGE_DELETE_CHAT and update.message and update.message.text.isdigit():
        idx = int(update.message.text.strip()) - 1
        chats = context.user_data.get('delete_chats_list', [])
        if 0 <= idx < len(chats):
            removed = chats[idx]
            cursor.execute("DELETE FROM allowed_chats WHERE chat_username = ?", (removed,))
            conn.commit()
            await update.message.reply_text(f"‚úÖ –ß–∞—Ç {removed} —É–¥–∞–ª—ë–Ω.", reply_markup=back_inline_markup)
        else:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä. –ü—Ä–∏—à–ª–∏—Ç–µ —á–∏—Å–ª–æ –∏–∑ —Å–ø–∏—Å–∫–∞.", reply_markup=back_inline_markup)
        # Clean up
        context.user_data.pop('delete_chats_list', None)
        context.user_data['content_stage'] = None
        return

    # Handle adding a new promo offer
    if context.user_data.get('promo_stage') == PROMO_STAGE_ADD and update.message and update.message.text:
        text = update.message.text.strip()
        if '‚Äî' in text:
            title, cost_str = [s.strip() for s in text.split('‚Äî', 1)]
            if cost_str.isdigit():
                cost = int(cost_str)
                cursor.execute("INSERT INTO promo_offers (title, cost) VALUES (?, ?)", (title, cost))
                conn.commit()
                await update.message.reply_text(f"‚úÖ –û—Ñ—Ñ–µ—Ä '{title}' –∑–∞ {cost} –ø—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=back_inline_markup)
                context.user_data['promo_stage'] = None
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ ‚Äî.", reply_markup=back_inline_markup)
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî —Å—Ç–æ–∏–º–æ—Å—Ç—å", reply_markup=back_inline_markup)
        return

    # Handle deletion of promo offer by ID
    if context.user_data.get('promo_stage') == PROMO_STAGE_DELETE and update.message and update.message.text.isdigit():
        oid = int(update.message.text.strip())
        cursor.execute("DELETE FROM promo_offers WHERE offer_id = ?", (oid,))
        conn.commit()
        await update.message.reply_text(f"‚úÖ –û—Ñ—Ñ–µ—Ä {oid} —É–¥–∞–ª—ë–Ω.", reply_markup=back_inline_markup)
        context.user_data['promo_stage'] = None
        return

    # Handle deletion of text template by ID
    if context.user_data.get('content_stage') == CONTENT_STAGE_LIST_TEXTS and update.message and update.message.text:
        text_id = update.message.text.strip()
        if text_id.isdigit():
            tid = int(text_id)
            cursor.execute("DELETE FROM text_templates WHERE id = ?", (tid,))
            conn.commit()
            await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç —É–¥–∞–ª—ë–Ω.", reply_markup=back_inline_markup)
            context.user_data['content_stage'] = None
        else:
            await update.message.reply_text("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–∫—Å—Ç–∞.", reply_markup=back_inline_markup)
        return

    # Handle adding a new text template (preserve HTML formatting)
    if content_stage == CONTENT_STAGE_ADD_TEXT and update.message:
        # Preserve any HTML formatting sent by the admin
        text = getattr(update.message, "text_html", None) or update.message.text or ""
        cursor.execute(
            "INSERT INTO text_templates (text) VALUES (?)",
            (text,)
        )
        conn.commit()
        await update.message.reply_text("‚úÖ –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω.", reply_markup=back_inline_markup)
        context.user_data['content_stage'] = None
        return
    stage_bc = context.user_data.get('broadcast_stage')
    if stage_bc == BROADCAST_STAGE_TEXT and update.message.text:
        text = update.message.text
        context.user_data['broadcast_text'] = text
        await update.message.delete()
        # Offer next steps
        await update.message.reply_text(
            f"–¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n{text}",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ", callback_data='bc_attach_photo')],
                [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='bc_send_confirm')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='task_back')],
            ]),
            parse_mode=ParseMode.HTML
        )
    elif stage_bc == BROADCAST_STAGE_PHOTO and update.message.photo:
        photo = update.message.photo[-1]
        file = await photo.get_file()
        os.makedirs("screenshots", exist_ok=True)
        path = "screenshots/broadcast_photo.jpg"
        await file.download_to_drive(path)
        context.user_data['broadcast_photo'] = path
        await update.message.delete()
        await update.message.reply_text(
            "–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ì–æ—Ç–æ–≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–î–∞", callback_data='bc_execute')],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data='task_back')],
            ]),
            parse_mode=ParseMode.MARKDOWN_V2
        )

async def broadcast(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return

    message = ' '.join(context.args)
    cursor.execute("SELECT user_id FROM users")
    users = cursor.fetchall()
    count = 0
    for (uid,) in users:
        try:
            await context.bot.send_message(chat_id=uid, text=message, parse_mode=ParseMode.MARKDOWN_V2)
            count += 1
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {e}")
    await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")

# ‚Äî‚Äî‚Äî –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–¢–ê–¢–ò–°–¢–ò–ö–ò ‚Äî‚Äî‚Äî
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        return

    now = datetime.now()
    today_start = datetime(now.year, now.month, now.day)
    week_start = today_start - timedelta(days=now.weekday())

    # –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("SELECT COUNT(*) FROM users")
    total = cursor.fetchone()[0]

    # –ü—Ä–∏—à–ª–æ —Å–µ–≥–æ–¥–Ω—è
    cursor.execute(
        "SELECT COUNT(*) FROM users WHERE joined_date >= ?",
        (today_start.isoformat(),)
    )
    today_count = cursor.fetchone()[0]

    # –ü—Ä–∏—à–ª–æ –∑–∞ –Ω–µ–¥–µ–ª—é
    cursor.execute(
        "SELECT COUNT(*) FROM users WHERE joined_date >= ?",
        (week_start.isoformat(),)
    )
    week_count = cursor.fetchone()[0]

    text = (
        "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ AMB Bot:\n\n"
        f"‚ûñ<b>–ü—Ä–∏–±–∞–≤–∏–ª–æ—Å—å —Å–µ–≥–æ–¥–Ω—è:</b> {today_count}\n\n"
        f"‚ûñ<b>–ü—Ä–∏–±–∞–≤–∏–ª–æ—Å—å –∑–∞ –Ω–µ–¥–µ–ª—é:</b> {week_count}\n\n"
        f"ü§ô<b>–í—Å–µ–≥–æ:</b> {total}"
    )
    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª", callback_data='get_users_file')
    ]])
    await update.message.reply_text(text, parse_mode=ParseMode.HTML, reply_markup=keyboard)

async def send_users_file_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    user_id = query.from_user.id
    if user_id not in ADMIN_IDS:
        await query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    await query.answer()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("SELECT user_id, username, first_name, last_name, ref_by, joined_date FROM users")
    rows = cursor.fetchall()

    # –ì–æ—Ç–æ–≤–∏–º CSV
    export_dir = "exports"
    os.makedirs(export_dir, exist_ok=True)
    filename = f"users_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
    path = os.path.join(export_dir, filename)
    with open(path, "w", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(["user_id", "username", "first_name", "last_name", "ref_by", "joined_date"])
        writer.writerows(rows)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω—É
    with open(path, "rb") as f:
        await query.message.reply_document(document=f, filename=filename)

def main() -> None:
    job_queue = JobQueue()
    application = ApplicationBuilder().token(TOKEN).job_queue(job_queue).build()
    # 1. CommandHandler registrations
    application.add_handler(CommandHandler('start', start))
    application.add_handler(CommandHandler('profile', profile))
    application.add_handler(CommandHandler('broadcast', broadcast))
    # 2. CallbackQueryHandler registrations
    application.add_handler(CallbackQueryHandler(button_handler), group=1)
    application.add_handler(
        CallbackQueryHandler(check_subscription_handler, pattern='^check_subscription$')
    )
    application.add_handler(
        CallbackQueryHandler(promo_choose_handler, pattern='^promo_choose$')
    )
    application.add_handler(
        CallbackQueryHandler(promo_back_handler, pattern='^promo_back$')
    )
    application.add_handler(
        CallbackQueryHandler(promo_offer_handler, pattern=r'^promo_offer\|\d+$')
    )
    application.add_handler(
        CallbackQueryHandler(promo_confirm_handler, pattern=r'^promo_confirm\|\d+$')
    )
    application.add_handler(
        CallbackQueryHandler(
            send_users_file_handler,
            pattern=r'^get_users_file$'
        )
    )
    # 3. MessageHandler(filters.Regex(...)) for admin reply-keyboard buttons (in order)
    # 1. "–ê–¥–º–∏–Ω", "–ì–ª–∞–≤–Ω–∞—è", "–ö–æ–Ω—Ç–µ–Ω—Ç", "–ü—Ä–æ–º–æ", "–ö—É–ø–æ–Ω—ã", "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "–†–∞—Å—Å—ã–ª–∫–∞"
    application.add_handler(MessageHandler(filters.Regex('^–ê–¥–º–∏–Ω$'), admin_panel))
    application.add_handler(MessageHandler(filters.Regex('^–ì–ª–∞–≤–Ω–∞—è$'), main_button_handler))
    application.add_handler(MessageHandler(filters.Regex(r'^–ö–æ–Ω—Ç–µ–Ω—Ç$') & filters.User(ADMIN_IDS), content_command))
    application.add_handler(MessageHandler(filters.Regex(r'^–ü—Ä–æ–º–æ$') & filters.User(ADMIN_IDS), promo_panel))
    # "–ö—É–ø–æ–Ω—ã" button is not explicitly handled above; if needed, add here.
    application.add_handler(
        MessageHandler(
            filters.Regex(r'^–ö—É–ø–æ–Ω—ã$') & filters.User(ADMIN_IDS),
            lambda update, context: None  # Placeholder if handler exists
        )
    )
    application.add_handler(
        MessageHandler(
            filters.Regex(r'^–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$') & filters.User(ADMIN_IDS),
            stats_command
        )
    )
    application.add_handler(MessageHandler(filters.Regex(r'^–†–∞—Å—Å—ã–ª–∫–∞$'), broadcast_panel))

    # 2. Content submenu
    application.add_handler(
        MessageHandler(filters.Regex(r'^üì• –î–æ–±–∞–≤–∏—Ç—å –º–µ–º$') & filters.User(ADMIN_IDS), content_add_meme_handler)
    )
    application.add_handler(
        MessageHandler(filters.Regex(r'^üóë –£–¥–∞–ª–∏—Ç—å –º–µ–º$') & filters.User(ADMIN_IDS), content_delete_meme_handler)
    )
    application.add_handler(
        MessageHandler(filters.Regex(r'^üìã –°–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤$') & filters.User(ADMIN_IDS), content_list_chats_handler)
    )
    application.add_handler(
        MessageHandler(filters.Regex(r'^‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç$') & filters.User(ADMIN_IDS), content_add_chat_handler)
    )
    application.add_handler(
        MessageHandler(filters.Regex(r'^üóë –£–¥–∞–ª–∏—Ç—å —á–∞—Ç$') & filters.User(ADMIN_IDS), content_delete_chat_handler)
    )
    application.add_handler(
        MessageHandler(filters.Regex(r'^‚úçÔ∏è –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç$') & filters.User(ADMIN_IDS), content_add_text_handler)
    )
    application.add_handler(
        MessageHandler(filters.Regex(r'^üßæ –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤$') & filters.User(ADMIN_IDS), content_list_texts_handler)
    )
    application.add_handler(
        MessageHandler(filters.Regex(r'^üîô –ù–∞–∑–∞–¥$') & filters.User(ADMIN_IDS), admin_panel)
    )

    # 3. Promo submenu
    application.add_handler(
        MessageHandler(filters.Regex(r'^üì• –î–æ–±–∞–≤–∏—Ç—å –æ—Ñ—Ñ–µ—Ä$') & filters.User(ADMIN_IDS), promo_add_offer_handler)
    )
    application.add_handler(
        MessageHandler(filters.Regex(r'^üóë –£–¥–∞–ª–∏—Ç—å –æ—Ñ—Ñ–µ—Ä$') & filters.User(ADMIN_IDS), promo_delete_offer_handler)
    )
    application.add_handler(
        MessageHandler(filters.Regex(r'^üìã –°–ø–∏—Å–æ–∫ –æ—Ñ—Ñ–µ—Ä–æ–≤$') & filters.User(ADMIN_IDS), promo_list_offers_handler)
    )

    # 4. User menu: "–ó–∞–¥–∞–Ω–∏—è", "üë§ –ü—Ä–æ—Ñ–∏–ª—å", "‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞", "üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", "üî•–ü–æ–ª—É—á–∏—Ç—å –ü–†–û–ú–û", "‚úÖ–í–≤–µ—Å—Ç–∏ –ü–†–û–ú–û"
    application.add_handler(
        MessageHandler(filters.Regex(r'^–ó–∞–¥–∞–Ω–∏—è$'), show_participate_menu)
    )
    application.add_handler(MessageHandler(filters.Regex('^üë§ –ü—Ä–æ—Ñ–∏–ª—å$'), profile))
    application.add_handler(MessageHandler(filters.Regex('^‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞$'), rules_handler))
    application.add_handler(MessageHandler(filters.Regex('^üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞$'), support_handler))
    application.add_handler(
        MessageHandler(filters.Regex(r'^üî•–ü–æ–ª—É—á–∏—Ç—å –ü–†–û–ú–û$'), promo_user_start)
    )
    # Conversation –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    promo_conv = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex(r'^‚úÖ–í–≤–µ—Å—Ç–∏ –ü–†–û–ú–û$'), prompt_promo_code)
        ],
        states={
            ENTER_CODE: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_promo_code)
            ]
        },
        fallbacks=[],
        per_user=True,
        per_chat=True
    )
    application.add_handler(promo_conv)

    # Handle admin "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è" via text messages (if needed)
    application.add_handler(
        MessageHandler(
            filters.Regex('^–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ$') & filters.User(ADMIN_IDS),
            check_tasks_command
        )
    )

    # 5. After all specific handlers, add the generic broadcast and admin-input handlers
    application.add_handler(
        MessageHandler(filters.TEXT & filters.User(ADMIN_IDS), handle_admin_broadcast_message)
    )
    application.add_handler(
        MessageHandler(
            filters.ALL & filters.User(ADMIN_IDS) & ~filters.Regex('^–ê–¥–º–∏–Ω$'),
            handle_admin_input
        ),
        group=1
    )

    # 6. Finally, keep a single screenshot handler at the end
    application.add_handler(
        MessageHandler(
            filters.PHOTO | filters.Document.IMAGE,
            handle_screenshot
        )
    )
    application.add_handler(CommandHandler("clear", clear_chat))

    application.run_polling()

# --- RULES HANDLER ---
async def rules_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Delete user's pressed button message
    await update.message.delete()
    # Send rules
    await update.message.reply_text(
        rules_text,
        parse_mode=ParseMode.HTML,
        reply_markup=back_inline_markup
    )

# --- SUPPORT HANDLER ---
async def support_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.delete()
    await update.message.reply_text(
        "–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º: @amb_managers",
        reply_markup=back_inline_markup
    )

# --- MAIN BUTTON HANDLER ---
async def main_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.delete()
    await send_main_reply_keyboard(update, context)

# --- MAIN REPLY KEYBOARD HANDLER ---
async def send_main_reply_keyboard(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # Delete previous main-screen message if exists
    prev = context.user_data.get('last_main_msg')
    if prev:
        try:
            await context.bot.delete_message(chat_id=prev['chat_id'], message_id=prev['message_id'])
        except:
            pass
    context.user_data['last_main_msg'] = None
    user_id = update.effective_user.id
    buttons = [
        [KeyboardButton("–ó–∞–¥–∞–Ω–∏—è")],
        [KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("‚ÑπÔ∏è –ü—Ä–∞–≤–∏–ª–∞"), KeyboardButton("üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
        [KeyboardButton("üî•–ü–æ–ª—É—á–∏—Ç—å –ü–†–û–ú–û"), KeyboardButton("‚úÖ–í–≤–µ—Å—Ç–∏ –ü–†–û–ú–û")]
    ]
    if user_id in ADMIN_IDS:
        buttons.append([KeyboardButton("–ê–¥–º–∏–Ω")])
    reply_keyboard = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    # Determine where to send
    if hasattr(update, "callback_query") and update.callback_query:
        target = update.callback_query.message
    else:
        target = update.message
    main_msg = await target.reply_text(
        "<b>üõë–°—Ç–æ–π-—Å—Ç–æ–π-—Å—Ç–æ–π..</b>\n"
        "üëâ–£ —Ç–µ–±—è –µ—Å—Ç—å <b>–ü–†–û–ú–û–ö–û–î</b>‚ÅâÔ∏è\n\n"
        "<b>–í–≤–µ–¥–∏ –µ–≥–æ –∏ –ø–æ–ª—É—á–∏ –ø–æ–¥–∞—Ä–æ–∫!</b>\n\n"
        "‚¨áÔ∏è –ñ–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É \"‚úÖ–í–≤–µ—Å—Ç–∏ –ü–†–û–ú–û\" ‚¨áÔ∏è\n",
        parse_mode=ParseMode.HTML,
        reply_markup=reply_keyboard
    )
    # Save main-screen message for later deletion
    context.user_data['last_main_msg'] = {
        'chat_id': main_msg.chat_id,
        'message_id': main_msg.message_id
    }

if __name__ == '__main__':
    main()
