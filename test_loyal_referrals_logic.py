#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –ø—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
"""

import sqlite3
from datetime import datetime, timedelta
from config import DB_PATH

def test_loyal_referrals_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –ª–æ–≥–∏–∫—É –ø—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤"""
    
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π
        three_days_ago = datetime.now() - timedelta(days=3)
        
        cursor.execute("""
            SELECT u.user_id, u.username, u.ref_by, u.joined_date
            FROM users u
            WHERE u.ref_by IS NOT NULL 
            AND u.joined_date < ?
            ORDER BY u.joined_date DESC
        """, (three_days_ago.isoformat(),))
        
        old_referrals = cursor.fetchall()
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(old_referrals)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ —Å—Ç–∞—Ä—à–µ 3 –¥–Ω–µ–π")
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        real_loyal_counts = {}
        
        for user_id, username, ref_by, joined_date in old_referrals:
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –∑–¥–µ—Å—å –±—ã–ª–∞ –±—ã –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            # –î–ª—è —Ç–µ—Å—Ç–∞ —Å—á–∏—Ç–∞–µ–º –≤—Å–µ—Ö –∫–∞–∫ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö
            if ref_by not in real_loyal_counts:
                real_loyal_counts[ref_by] = 0
            real_loyal_counts[ref_by] += 1
        
        print(f"\n–†–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {sum(real_loyal_counts.values())}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
        print("\n=== –¢–ï–°–¢ –ù–û–í–û–ô –õ–û–ì–ò–ö–ò ===")
        
        for ref_by, real_loyal_count in real_loyal_counts.items():
            cursor.execute("""
                SELECT loyal_referrals, used_loyal FROM users WHERE user_id = ?
            """, (ref_by,))
            result = cursor.fetchone()
            
            if result:
                current_loyal, used_loyal = result
                used_loyal = used_loyal or 0
                
                # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞: —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–∞–Ω–Ω—ã–µ - –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ
                new_loyal_referrals = max(0, real_loyal_count - used_loyal)
                
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {ref_by}:")
                print(f"  - –†–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–∞–Ω–Ω—ã—Ö: {real_loyal_count}")
                print(f"  - –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {used_loyal}")
                print(f"  - –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {current_loyal}")
                print(f"  - –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_loyal_referrals}")
                print(f"  - –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {new_loyal_referrals - current_loyal}")
                print()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–º–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
        cursor.execute("""
            SELECT user_id, loyal_referrals, used_loyal, referrals_count
            FROM users 
            WHERE used_loyal > 0
            ORDER BY used_loyal DESC
        """)
        
        users_with_used = cursor.fetchall()
        
        if users_with_used:
            print("=== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò –° –ü–û–¢–†–ê–ß–ï–ù–ù–´–ú–ò –†–ï–§–ï–†–ê–õ–ê–ú–ò ===")
            for user_id, loyal_referrals, used_loyal, referrals_count in users_with_used:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}:")
                print(f"  - –ü—Ä–µ–¥–∞–Ω–Ω—ã—Ö: {loyal_referrals}")
                print(f"  - –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: {used_loyal}")
                print(f"  - –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals_count}")
                print()
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        conn.close()

if __name__ == "__main__":
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏ –ø—Ä–µ–¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤...")
    test_loyal_referrals_logic() 